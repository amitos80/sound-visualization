{"version":3,"sources":["../src/load-texture.js"],"names":["loadTexture","gl","texId","url","activeTexture","TEXTURE0","texture","createTexture","bindTexture","TEXTURE_2D","level","internalFormat","RGBA","width","height","border","srcFormat","srcType","UNSIGNED_BYTE","pixel","Uint8Array","texImage2D","image","window","Image","onload","isPowerOf2","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","src","value"],"mappings":";;;;;;;AAAe,SAASA,WAAT,CAAsBC,EAAtB,EAA0BC,KAA1B,EAAiCC,GAAjC,EAAsC;AACnDF,EAAAA,EAAE,CAACG,aAAH,CAAiBH,EAAE,CAACI,QAAH,GAAcH,KAA/B;AACA,MAAMI,OAAO,GAAGL,EAAE,CAACM,aAAH,EAAhB;AACAN,EAAAA,EAAE,CAACO,WAAH,CAAeP,EAAE,CAACQ,UAAlB,EAA8BH,OAA9B,EAHmD,CAKnD;AACA;AACA;AACA;AACA;;AACA,MAAMI,KAAK,GAAG,CAAd;AACA,MAAMC,cAAc,GAAGV,EAAE,CAACW,IAA1B;AACA,MAAMC,KAAK,GAAG,CAAd;AACA,MAAMC,MAAM,GAAG,CAAf;AACA,MAAMC,MAAM,GAAG,CAAf;AACA,MAAMC,SAAS,GAAGf,EAAE,CAACW,IAArB;AACA,MAAMK,OAAO,GAAGhB,EAAE,CAACiB,aAAnB;AACA,MAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAe,CAAC,CAAD,EAAI,CAAJ,EAAO,GAAP,EAAY,GAAZ,CAAf,CAAd,CAjBmD,CAiBJ;;AAC/CnB,EAAAA,EAAE,CAACoB,UAAH,CAAcpB,EAAE,CAACQ,UAAjB,EAA6BC,KAA7B,EAAoCC,cAApC,EAAoDE,KAApD,EAA2DC,MAA3D,EAAmEC,MAAnE,EAA2EC,SAA3E,EAAsFC,OAAtF,EAA+FE,KAA/F;AAEA,MAAMG,KAAK,GAAG,IAAIC,MAAM,CAACC,KAAX,EAAd;;AACAF,EAAAA,KAAK,CAACG,MAAN,GAAe,YAAM;AACnBxB,IAAAA,EAAE,CAACG,aAAH,CAAiBH,EAAE,CAACI,QAAH,GAAcH,KAA/B;AACAD,IAAAA,EAAE,CAACO,WAAH,CAAeP,EAAE,CAACQ,UAAlB,EAA8BH,OAA9B;AACAL,IAAAA,EAAE,CAACoB,UAAH,CAAcpB,EAAE,CAACQ,UAAjB,EAA6BC,KAA7B,EAAoCC,cAApC,EAAoDK,SAApD,EAA+DC,OAA/D,EAAwEK,KAAxE,EAHmB,CAKnB;AACA;AACA;;AACA,QAAII,UAAU,CAACJ,KAAK,CAACT,KAAP,CAAV,IAA2Ba,UAAU,CAACJ,KAAK,CAACR,MAAP,CAAzC,EAAyD;AACvD;AACAb,MAAAA,EAAE,CAAC0B,cAAH,CAAkB1B,EAAE,CAACQ,UAArB;AACD,KAHD,MAGO;AACL;AACA;AACAR,MAAAA,EAAE,CAAC2B,aAAH,CAAiB3B,EAAE,CAACQ,UAApB,EAAgCR,EAAE,CAAC4B,cAAnC,EAAmD5B,EAAE,CAAC6B,aAAtD;AACA7B,MAAAA,EAAE,CAAC2B,aAAH,CAAiB3B,EAAE,CAACQ,UAApB,EAAgCR,EAAE,CAAC8B,cAAnC,EAAmD9B,EAAE,CAAC6B,aAAtD;AACA7B,MAAAA,EAAE,CAAC2B,aAAH,CAAiB3B,EAAE,CAACQ,UAApB,EAAgCR,EAAE,CAAC+B,kBAAnC,EAAuD/B,EAAE,CAACgC,MAA1D;AACD;AACF,GAlBD;;AAmBAX,EAAAA,KAAK,CAACY,GAAN,GAAY/B,GAAZ;AAEA,SAAOG,OAAP;AACD;;AAED,SAASoB,UAAT,CAAqBS,KAArB,EAA4B;AAC1B,SAAO,CAACA,KAAK,GAAIA,KAAK,GAAG,CAAlB,MAA0B,CAAjC;AACD","sourcesContent":["export default function loadTexture (gl, texId, url) {\n  gl.activeTexture(gl.TEXTURE0 + texId)\n  const texture = gl.createTexture()\n  gl.bindTexture(gl.TEXTURE_2D, texture)\n\n  // Because images have to be download over the internet\n  // they might take a moment until they are ready.\n  // Until then put a single pixel in the texture so we can\n  // use it immediately. When the image has finished downloading\n  // we'll update the texture with the contents of the image.\n  const level = 0\n  const internalFormat = gl.RGBA\n  const width = 1\n  const height = 1\n  const border = 0\n  const srcFormat = gl.RGBA\n  const srcType = gl.UNSIGNED_BYTE\n  const pixel = new Uint8Array([0, 0, 255, 255]) // opaque blue\n  gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, srcFormat, srcType, pixel)\n\n  const image = new window.Image()\n  image.onload = () => {\n    gl.activeTexture(gl.TEXTURE0 + texId)\n    gl.bindTexture(gl.TEXTURE_2D, texture)\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, srcFormat, srcType, image)\n\n    // WebGL1 has different requirements for power of 2 images\n    // vs non power of 2 images so check if the image is a\n    // power of 2 in both dimensions.\n    if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\n      // Yes, it's a power of 2. Generate mips.\n      gl.generateMipmap(gl.TEXTURE_2D)\n    } else {\n      // No, it's not a power of 2. Turn of mips and set\n      // wrapping to clamp to edge\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\n    }\n  }\n  image.src = url\n\n  return texture\n}\n\nfunction isPowerOf2 (value) {\n  return (value & (value - 1)) === 0\n}\n"],"file":"load-texture.js"}