{"ast":null,"code":"function fromStream(stream, canvas_id) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  this.current_stream.id = canvas_id;\n  this.current_stream.options = options;\n  var audioCtx, analyser, source;\n\n  if (!this.sources[stream.toString()]) {\n    audioCtx = options.context || new AudioContext();\n    analyser = audioCtx.createAnalyser();\n    source = audioCtx.createMediaStreamSource(stream);\n    source.connect(analyser);\n    this.sources[stream.toString()] = {\n      audioCtx: audioCtx,\n      analyser: analyser,\n      source: source\n    };\n  } else {\n    cancelAnimationFrame(this.sources[stream.toString()].animation);\n    audioCtx = this.sources[stream.toString()].audioCtx;\n    analyser = this.sources[stream.toString()].analyser;\n    source = this.sources[stream.toString()].source;\n  }\n\n  analyser.fftsize = 32768;\n  var bufferLength = analyser.frequencyBinCount;\n  this.current_stream.data = new Uint8Array(bufferLength);\n  var self = this;\n\n  function renderFrame() {\n    self.current_stream.animation = requestAnimationFrame(self.current_stream.loop);\n    self.sources[stream.toString()].animation = self.current_stream.animation;\n    analyser.getByteFrequencyData(self.current_stream.data);\n    self.visualize(self.current_stream.data, self.current_stream.id, self.current_stream.options);\n  }\n\n  this.current_stream.loop = renderFrame;\n  renderFrame();\n}\n\nfunction stopStream() {\n  cancelAnimationFrame(this.current_stream.animation);\n}\n\nfunction playStream() {\n  this.current_stream.loop();\n}\n\nexport default {\n  fromStream: fromStream,\n  stopStream: stopStream,\n  playStream: playStream\n};","map":null,"metadata":{},"sourceType":"module"}