{"ast":null,"code":"function fromStream(stream, canvas_id, options = {}) {\n  this.current_stream.id = canvas_id;\n  this.current_stream.options = options;\n  let audioCtx, analyser, source;\n\n  if (!this.sources[stream.toString()]) {\n    audioCtx = options.context || new AudioContext();\n    analyser = audioCtx.createAnalyser();\n    source = audioCtx.createMediaStreamSource(stream);\n    source.connect(analyser);\n    this.sources[stream.toString()] = {\n      audioCtx: audioCtx,\n      analyser: analyser,\n      source: source\n    };\n  } else {\n    cancelAnimationFrame(this.sources[stream.toString()].animation);\n    audioCtx = this.sources[stream.toString()].audioCtx;\n    analyser = this.sources[stream.toString()].analyser;\n    source = this.sources[stream.toString()].source;\n  }\n\n  analyser.fftsize = 32768;\n  let bufferLength = analyser.frequencyBinCount;\n  this.current_stream.data = new Uint8Array(bufferLength);\n  let self = this;\n\n  function renderFrame() {\n    self.current_stream.animation = requestAnimationFrame(self.current_stream.loop);\n    self.sources[stream.toString()].animation = self.current_stream.animation;\n    analyser.getByteFrequencyData(self.current_stream.data);\n    self.visualize(self.current_stream.data, self.current_stream.id, self.current_stream.options);\n  }\n\n  this.current_stream.loop = renderFrame;\n  renderFrame();\n}\n\nfunction stopStream() {\n  cancelAnimationFrame(this.current_stream.animation);\n}\n\nfunction playStream() {\n  this.current_stream.loop();\n}\n\nexport default {\n  fromStream,\n  stopStream,\n  playStream\n};","map":{"version":3,"sources":["/Users/amit/Projects/sound-visualization/client/utils/wave-visualizer/fromStream.js"],"names":["fromStream","stream","canvas_id","options","current_stream","id","audioCtx","analyser","source","sources","toString","context","AudioContext","createAnalyser","createMediaStreamSource","connect","cancelAnimationFrame","animation","fftsize","bufferLength","frequencyBinCount","data","Uint8Array","self","renderFrame","requestAnimationFrame","loop","getByteFrequencyData","visualize","stopStream","playStream"],"mappings":"AAAA,SAASA,UAAT,CAAoBC,MAApB,EAA4BC,SAA5B,EAAuCC,OAAO,GAAG,EAAjD,EAAqD;AACnD,OAAKC,cAAL,CAAoBC,EAApB,GAAyBH,SAAzB;AACA,OAAKE,cAAL,CAAoBD,OAApB,GAA8BA,OAA9B;AAEA,MAAIG,QAAJ,EAAcC,QAAd,EAAwBC,MAAxB;;AACA,MAAI,CAAC,KAAKC,OAAL,CAAaR,MAAM,CAACS,QAAP,EAAb,CAAL,EAAsC;AACpCJ,IAAAA,QAAQ,GAAGH,OAAO,CAACQ,OAAR,IAAmB,IAAIC,YAAJ,EAA9B;AACAL,IAAAA,QAAQ,GAAGD,QAAQ,CAACO,cAAT,EAAX;AAEAL,IAAAA,MAAM,GAAGF,QAAQ,CAACQ,uBAAT,CAAiCb,MAAjC,CAAT;AACAO,IAAAA,MAAM,CAACO,OAAP,CAAeR,QAAf;AACA,SAAKE,OAAL,CAAaR,MAAM,CAACS,QAAP,EAAb,IAAkC;AAChCJ,MAAAA,QAAQ,EAAEA,QADsB;AAEhCC,MAAAA,QAAQ,EAAEA,QAFsB;AAGhCC,MAAAA,MAAM,EAAEA;AAHwB,KAAlC;AAKD,GAXD,MAWO;AACLQ,IAAAA,oBAAoB,CAAC,KAAKP,OAAL,CAAaR,MAAM,CAACS,QAAP,EAAb,EAAgCO,SAAjC,CAApB;AACAX,IAAAA,QAAQ,GAAG,KAAKG,OAAL,CAAaR,MAAM,CAACS,QAAP,EAAb,EAAgCJ,QAA3C;AACAC,IAAAA,QAAQ,GAAG,KAAKE,OAAL,CAAaR,MAAM,CAACS,QAAP,EAAb,EAAgCH,QAA3C;AACAC,IAAAA,MAAM,GAAG,KAAKC,OAAL,CAAaR,MAAM,CAACS,QAAP,EAAb,EAAgCF,MAAzC;AACD;;AAEDD,EAAAA,QAAQ,CAACW,OAAT,GAAmB,KAAnB;AACA,MAAIC,YAAY,GAAGZ,QAAQ,CAACa,iBAA5B;AACA,OAAKhB,cAAL,CAAoBiB,IAApB,GAA2B,IAAIC,UAAJ,CAAeH,YAAf,CAA3B;AAEA,MAAII,IAAI,GAAG,IAAX;;AAEA,WAASC,WAAT,GAAuB;AACrBD,IAAAA,IAAI,CAACnB,cAAL,CAAoBa,SAApB,GAAgCQ,qBAAqB,CACnDF,IAAI,CAACnB,cAAL,CAAoBsB,IAD+B,CAArD;AAGAH,IAAAA,IAAI,CAACd,OAAL,CAAaR,MAAM,CAACS,QAAP,EAAb,EAAgCO,SAAhC,GAA4CM,IAAI,CAACnB,cAAL,CAAoBa,SAAhE;AACAV,IAAAA,QAAQ,CAACoB,oBAAT,CAA8BJ,IAAI,CAACnB,cAAL,CAAoBiB,IAAlD;AAEAE,IAAAA,IAAI,CAACK,SAAL,CACEL,IAAI,CAACnB,cAAL,CAAoBiB,IADtB,EAEEE,IAAI,CAACnB,cAAL,CAAoBC,EAFtB,EAGEkB,IAAI,CAACnB,cAAL,CAAoBD,OAHtB;AAKD;;AAED,OAAKC,cAAL,CAAoBsB,IAApB,GAA2BF,WAA3B;AACAA,EAAAA,WAAW;AACZ;;AAED,SAASK,UAAT,GAAsB;AACpBb,EAAAA,oBAAoB,CAAC,KAAKZ,cAAL,CAAoBa,SAArB,CAApB;AACD;;AAED,SAASa,UAAT,GAAsB;AACpB,OAAK1B,cAAL,CAAoBsB,IAApB;AACD;;AAED,eAAe;AACb1B,EAAAA,UADa;AAEb6B,EAAAA,UAFa;AAGbC,EAAAA;AAHa,CAAf","sourcesContent":["function fromStream(stream, canvas_id, options = {}) {\n  this.current_stream.id = canvas_id\n  this.current_stream.options = options\n\n  let audioCtx, analyser, source\n  if (!this.sources[stream.toString()]) {\n    audioCtx = options.context || new AudioContext()\n    analyser = audioCtx.createAnalyser()\n\n    source = audioCtx.createMediaStreamSource(stream)\n    source.connect(analyser)\n    this.sources[stream.toString()] = {\n      audioCtx: audioCtx,\n      analyser: analyser,\n      source: source,\n    }\n  } else {\n    cancelAnimationFrame(this.sources[stream.toString()].animation)\n    audioCtx = this.sources[stream.toString()].audioCtx\n    analyser = this.sources[stream.toString()].analyser\n    source = this.sources[stream.toString()].source\n  }\n\n  analyser.fftsize = 32768\n  let bufferLength = analyser.frequencyBinCount\n  this.current_stream.data = new Uint8Array(bufferLength)\n\n  let self = this\n\n  function renderFrame() {\n    self.current_stream.animation = requestAnimationFrame(\n      self.current_stream.loop,\n    )\n    self.sources[stream.toString()].animation = self.current_stream.animation\n    analyser.getByteFrequencyData(self.current_stream.data)\n\n    self.visualize(\n      self.current_stream.data,\n      self.current_stream.id,\n      self.current_stream.options,\n    )\n  }\n\n  this.current_stream.loop = renderFrame\n  renderFrame()\n}\n\nfunction stopStream() {\n  cancelAnimationFrame(this.current_stream.animation)\n}\n\nfunction playStream() {\n  this.current_stream.loop()\n}\n\nexport default {\n  fromStream,\n  stopStream,\n  playStream,\n}\n"]},"metadata":{},"sourceType":"module"}