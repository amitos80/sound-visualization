{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { drawDualbarsBlocks } from './visuals/drawDualbarsBlocks'; //options:type,colors,stroke\n\nexport default function visualize(data, canvasId) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var frame = arguments.length > 3 ? arguments[3] : undefined;\n  //make a clone of options\n  options = _objectSpread({}, options); //options\n\n  if (!options.stroke) options.stroke = 1;\n  if (!options.colors) options.colors = ['#ff9234', '#ff9234'];\n  var canvas = document.getElementById(canvasId);\n  if (!canvas) return;\n  var ctx = canvas.getContext('2d');\n  var h = canvas.height;\n  var w = canvas.width;\n  ctx.strokeStyle = options.colors[0];\n  ctx.lineWidth = options.stroke;\n  var functionContext = {\n    data: data,\n    options: options,\n    ctx: ctx,\n    h: h,\n    w: w,\n    Helper: this.Helper,\n    canvasId: canvasId\n  };\n  ctx.clearRect(0, 0, w, h);\n  ctx.beginPath();\n  drawDualbarsBlocks(functionContext);\n}","map":{"version":3,"sources":["/Users/amit/Projects/sound-visualization/client/lib/wave-visualizer/visualize.js"],"names":["drawDualbarsBlocks","visualize","data","canvasId","options","frame","stroke","colors","canvas","document","getElementById","ctx","getContext","h","height","w","width","strokeStyle","lineWidth","functionContext","Helper","clearRect","beginPath"],"mappings":";;;;;;AAAA,SAASA,kBAAT,QAAmC,8BAAnC,C,CAEA;;AACA,eAAe,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,QAAzB,EAAwD;AAAA,MAArBC,OAAqB,uEAAX,EAAW;AAAA,MAAPC,KAAO;AACrE;AACAD,EAAAA,OAAO,qBAAOA,OAAP,CAAP,CAFqE,CAGrE;;AACA,MAAI,CAACA,OAAO,CAACE,MAAb,EAAqBF,OAAO,CAACE,MAAR,GAAiB,CAAjB;AACrB,MAAI,CAACF,OAAO,CAACG,MAAb,EAAqBH,OAAO,CAACG,MAAR,GAAiB,CAAC,SAAD,EAAY,SAAZ,CAAjB;AACrB,MAAIC,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwBP,QAAxB,CAAb;AAEA,MAAI,CAACK,MAAL,EAAa;AAEb,MAAIG,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAV;AACA,MAAIC,CAAC,GAAGL,MAAM,CAACM,MAAf;AACA,MAAIC,CAAC,GAAGP,MAAM,CAACQ,KAAf;AAEAL,EAAAA,GAAG,CAACM,WAAJ,GAAkBb,OAAO,CAACG,MAAR,CAAe,CAAf,CAAlB;AACAI,EAAAA,GAAG,CAACO,SAAJ,GAAgBd,OAAO,CAACE,MAAxB;AAEA,MAAMa,eAAe,GAAG;AACtBjB,IAAAA,IAAI,EAAJA,IADsB;AAEtBE,IAAAA,OAAO,EAAPA,OAFsB;AAGtBO,IAAAA,GAAG,EAAHA,GAHsB;AAItBE,IAAAA,CAAC,EAADA,CAJsB;AAKtBE,IAAAA,CAAC,EAADA,CALsB;AAMtBK,IAAAA,MAAM,EAAE,KAAKA,MANS;AAOtBjB,IAAAA,QAAQ,EAARA;AAPsB,GAAxB;AASAQ,EAAAA,GAAG,CAACU,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBN,CAApB,EAAuBF,CAAvB;AACAF,EAAAA,GAAG,CAACW,SAAJ;AACAtB,EAAAA,kBAAkB,CAACmB,eAAD,CAAlB;AACD","sourcesContent":["import { drawDualbarsBlocks } from './visuals/drawDualbarsBlocks'\n\n//options:type,colors,stroke\nexport default function visualize(data, canvasId, options = {}, frame) {\n  //make a clone of options\n  options = {...options}\n  //options\n  if (!options.stroke) options.stroke = 1\n  if (!options.colors) options.colors = ['#ff9234', '#ff9234']\n  let canvas = document.getElementById(canvasId)\n\n  if (!canvas) return\n\n  let ctx = canvas.getContext('2d')\n  let h = canvas.height\n  let w = canvas.width\n\n  ctx.strokeStyle = options.colors[0]\n  ctx.lineWidth = options.stroke\n\n  const functionContext = {\n    data,\n    options,\n    ctx,\n    h,\n    w,\n    Helper: this.Helper,\n    canvasId,\n  }\n  ctx.clearRect(0, 0, w, h)\n  ctx.beginPath()\n  drawDualbarsBlocks(functionContext)\n}\n"]},"metadata":{},"sourceType":"module"}