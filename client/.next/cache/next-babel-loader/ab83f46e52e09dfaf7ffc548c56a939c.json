{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport default function fromFile(file) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  //options\n  if (!options.stroke) options.stroke = 10;\n  var audio = new Audio();\n  audio.src = file;\n  var audioCtx = new AudioContext();\n  var analyser = audioCtx.createAnalyser();\n  var source = audioCtx.createMediaElementSource(audio);\n  source.connect(analyser);\n  analyser.fftSize = 64;\n  var bufferLength = analyser.frequencyBinCount;\n  var file_data;\n  var temp_data = new Uint8Array(bufferLength);\n  var getWave;\n  var fdi = 0;\n  var self = this;\n  audio.addEventListener('loadedmetadata', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(audio.duration === Infinity)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return new Promise(function (r) {\n              return setTimeout(r, 1000);\n            });\n\n          case 3:\n            audio.currentTime = 10000000 * Math.random();\n            _context.next = 0;\n            break;\n\n          case 6:\n            audio.currentTime = 0;\n            audio.play();\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n\n  audio.onplay = function () {\n    var findSize = function findSize(size) {\n      for (var range = 1; range <= 40; range++) {\n        var power = Math.pow(2, range);\n        if (size <= power) return power;\n      }\n    };\n\n    var d = audio.duration;\n    audio.playbackRate = 16;\n    d = d / audio.playbackRate;\n    var drawRate = 20; //ms\n\n    var size = d / (drawRate / 1000) * (analyser.fftSize / 2);\n    size = findSize(size);\n    file_data = new Uint8Array(size);\n    getWave = setInterval(function () {\n      analyser.getByteFrequencyData(temp_data);\n\n      for (var data in temp_data) {\n        data = temp_data[data];\n        file_data[fdi] = data;\n        fdi++;\n      }\n    }, drawRate);\n  };\n\n  audio.onended = function () {\n    if (audio.currentTime === audio.duration && file_data !== undefined) {\n      clearInterval(getWave);\n      var canvas = document.createElement('canvas');\n      canvas.height = window.innerHeight;\n      canvas.width = window.innerWidth;\n      self.visualize(file_data, canvas, options);\n      var image = canvas.toDataURL('image/jpg');\n      self.onFileLoad(image);\n      canvas.remove();\n    }\n  };\n}","map":{"version":3,"sources":["/Users/amit/Projects/sound-visualization/client/lib/wave-visualizer/fromFile.js"],"names":["fromFile","file","options","stroke","audio","Audio","src","audioCtx","AudioContext","analyser","createAnalyser","source","createMediaElementSource","connect","fftSize","bufferLength","frequencyBinCount","file_data","temp_data","Uint8Array","getWave","fdi","self","addEventListener","duration","Infinity","Promise","r","setTimeout","currentTime","Math","random","play","onplay","findSize","size","range","power","d","playbackRate","drawRate","setInterval","getByteFrequencyData","data","onended","undefined","clearInterval","canvas","document","createElement","height","window","innerHeight","width","innerWidth","visualize","image","toDataURL","onFileLoad","remove"],"mappings":"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","sourcesContent":["export default function fromFile(file, options = {}) {\n  //options\n  if (!options.stroke) options.stroke = 10\n\n  let audio = new Audio()\n  audio.src = file\n\n  let audioCtx = new AudioContext()\n  let analyser = audioCtx.createAnalyser()\n\n  let source = audioCtx.createMediaElementSource(audio)\n  source.connect(analyser)\n\n  analyser.fftSize = 64\n  let bufferLength = analyser.frequencyBinCount\n\n  let file_data\n  let temp_data = new Uint8Array(bufferLength)\n  let getWave\n  let fdi = 0\n  let self = this\n\n  audio.addEventListener('loadedmetadata', async function () {\n    while (audio.duration === Infinity) {\n      await new Promise((r) => setTimeout(r, 1000))\n      audio.currentTime = 10000000 * Math.random()\n    }\n\n    audio.currentTime = 0\n    audio.play()\n  })\n\n  audio.onplay = function () {\n    let findSize = (size) => {\n      for (let range = 1; range <= 40; range++) {\n        let power = 2 ** range\n\n        if (size <= power) return power\n      }\n    }\n    let d = audio.duration\n    audio.playbackRate = 16\n\n    d = d / audio.playbackRate\n\n    let drawRate = 20 //ms\n\n    let size = (d / (drawRate / 1000)) * (analyser.fftSize / 2)\n    size = findSize(size)\n    file_data = new Uint8Array(size)\n\n    getWave = setInterval(function () {\n      analyser.getByteFrequencyData(temp_data)\n\n      for (let data in temp_data) {\n        data = temp_data[data]\n        file_data[fdi] = data\n        fdi++\n      }\n    }, drawRate)\n  }\n\n  audio.onended = function () {\n    if (audio.currentTime === audio.duration && file_data !== undefined) {\n      clearInterval(getWave)\n\n      let canvas = document.createElement('canvas')\n      canvas.height = window.innerHeight\n      canvas.width = window.innerWidth\n\n      self.visualize(file_data, canvas, options)\n      let image = canvas.toDataURL('image/jpg')\n      self.onFileLoad(image)\n\n      canvas.remove()\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}