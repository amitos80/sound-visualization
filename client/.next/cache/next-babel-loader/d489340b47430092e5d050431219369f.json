{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport default function fromFile(file) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  //options\n  if (!options.stroke) options.stroke = 10;\n  var audio = new Audio();\n  audio.src = file;\n  var audioCtx = new AudioContext();\n  var analyser = audioCtx.createAnalyser();\n  var source = audioCtx.createMediaElementSource(audio);\n  source.connect(analyser);\n  analyser.fftSize = 64;\n  var bufferLength = analyser.frequencyBinCount;\n  var file_data;\n  var temp_data = new Uint8Array(bufferLength);\n  var getWave;\n  var fdi = 0;\n  var self = this;\n  audio.addEventListener('loadedmetadata', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(audio.duration === Infinity)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return new Promise(function (r) {\n              return setTimeout(r, 1000);\n            });\n\n          case 3:\n            audio.currentTime = 10000000 * Math.random();\n            _context.next = 0;\n            break;\n\n          case 6:\n            audio.currentTime = 0;\n            audio.play();\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n\n  audio.onplay = function () {\n    var findSize = function findSize(size) {\n      for (var range = 1; range <= 40; range++) {\n        var power = Math.pow(2, range);\n        if (size <= power) return power;\n      }\n    };\n\n    var d = audio.duration;\n    audio.playbackRate = 16;\n    d = d / audio.playbackRate;\n    var drawRate = 20; //ms\n\n    var size = d / (drawRate / 1000) * (analyser.fftSize / 2);\n    size = findSize(size);\n    file_data = new Uint8Array(size);\n    getWave = setInterval(function () {\n      analyser.getByteFrequencyData(temp_data);\n\n      for (var data in temp_data) {\n        data = temp_data[data];\n        file_data[fdi] = data;\n        fdi++;\n      }\n    }, drawRate);\n  };\n\n  audio.onended = function () {\n    if (audio.currentTime === audio.duration && file_data !== undefined) {\n      clearInterval(getWave);\n      var canvas = document.createElement('canvas');\n      canvas.height = window.innerHeight;\n      canvas.width = window.innerWidth;\n      self.visualize(file_data, canvas, options);\n      var image = canvas.toDataURL('image/jpg');\n      self.onFileLoad(image);\n      canvas.remove();\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}