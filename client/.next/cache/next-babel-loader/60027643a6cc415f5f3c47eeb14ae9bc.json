{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//import {RpcError as GrpcWebError} from 'grpc-web';\nimport { PlayerServiceClient } from '../proto/player_grpc_web_pb';\nimport { ClientMessage } from '../proto/player_pb';\nexport class PlayerService extends PlayerServiceClient {\n  constructor(hostname, credentials, options) {\n    if (true) return;\n    const address = hostname || `http://${window.location.hostname}:50051`;\n    super(address, credentials, options);\n\n    _defineProperty(this, \"client\", void 0);\n\n    _defineProperty(this, \"host\", void 0);\n\n    this.host = address;\n\n    if (!this.client) {\n      this.client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n    }\n  }\n\n  pointBit(request, metadata, callback) {\n    super.pointBit(request, metadata, callback);\n    if (true) return;\n\n    if (!this.client) {\n      this.client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n    } //console.log('PlayerService.prototype.pointBit request => ', request)\n\n\n    const {\n      a,\n      b,\n      c,\n      d\n    } = request.toObject();\n    console.log('PlayerService.prototype.pointBit request => ', {\n      a,\n      b,\n      c,\n      d\n    });\n    const clientMessage = new ClientMessage();\n    clientMessage.setA(a);\n    clientMessage.setB(b);\n    clientMessage.setC(c);\n    clientMessage.setD(d);\n\n    if (this.client) {\n      this.client.pointBit(clientMessage, undefined, (err, response) => {\n        if (err) {\n          console.error(err);\n        } else {\n          console.log('response', response.toObject());\n        }\n      });\n    }\n  }\n\n} // PlayerService.prototype.join = function join(params:ClientMessage) {\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA('542')\n//     clientMessage.setB('234')\n//     clientMessage.setC('1252')\n//     clientMessage.setD('2345')\n//     const stream = client.pointBit(clientMessage);\n//     stream.on('data', (message: ServerMessage) => {\n//         console.log(`client received$ ${message}`)\n//     });\n// }\n//\n// PlayerService.prototype.send = function (params:ClientMessage) {\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA(params.getA());\n//     clientMessage.setB(params.getB());\n//     clientMessage.setC(params.getC());\n//     clientMessage.setD(params.getD());\n//     client.pointBit(\n//         clientMessage,\n//         undefined,\n//         (err: any, response: ServerMessage) => {\n//             if (err) {\n//                 console.error(err);\n//             } else {\n//                 console.log('response', response.toObject());\n//                 (document.getElementById('message') as HTMLFormElement)!.value = '';\n//             }\n//         })\n// }\n// PlayerService.prototype.pointBit = function (ctx) {\n//     if (typeof window === 'undefined') return;\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//\n//     console.log('PlayerService.prototype.pointBit ctx => ', ctx)\n//     const [a, b, c, d] = ctx.array\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA(a);\n//     clientMessage.setB(b);\n//     clientMessage.setC(c);\n//     clientMessage.setD(d);\n//     if(client) {\n//         client.pointBit(\n//             clientMessage,\n//             undefined,\n//             (err: any, response: ServerMessage) => {\n//                 if (err) {\n//                     console.error(err);\n//                 } else {\n//                     console.log('response', response.toObject());\n//\n//                 }\n//             })\n//     }\n//\n// }\n\nexport default PlayerService;","map":null,"metadata":{},"sourceType":"module"}