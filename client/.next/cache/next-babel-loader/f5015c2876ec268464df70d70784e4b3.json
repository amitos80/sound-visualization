{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { drawDualbarsBlocks } from './visuals/drawDualbarsBlocks'; //options:type,colors,stroke\n\nexport default function visualize(data, canvasId) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var frame = arguments.length > 3 ? arguments[3] : undefined;\n  //make a clone of options\n  options = _objectSpread({}, options); //options\n\n  if (!options.stroke) options.stroke = 1;\n  if (!options.colors) options.colors = ['#ff9234', '#ff9234'];\n  var canvas = document.getElementById(canvasId);\n  if (!canvas) return;\n  var ctx = canvas.getContext('2d');\n  var h = canvas.height;\n  var w = canvas.width;\n  ctx.strokeStyle = options.colors[0];\n  ctx.lineWidth = options.stroke;\n  var functionContext = {\n    data: data,\n    options: options,\n    ctx: ctx,\n    h: h,\n    w: w,\n    Helper: this.Helper,\n    canvasId: canvasId\n  };\n  ctx.clearRect(0, 0, w, h);\n  ctx.beginPath();\n  drawDualbarsBlocks(functionContext);\n}","map":null,"metadata":{},"sourceType":"module"}