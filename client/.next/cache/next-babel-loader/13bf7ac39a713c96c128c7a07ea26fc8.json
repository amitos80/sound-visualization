{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n//import {RpcError as GrpcWebError} from 'grpc-web';\nimport { PlayerServiceClient } from '../proto/player_grpc_web_pb';\nimport { ClientMessage } from '../proto/player_pb';\nvar client;\nexport var PlayerService = /*#__PURE__*/function (_PlayerServiceClient) {\n  _inherits(PlayerService, _PlayerServiceClient);\n\n  var _super = _createSuper(PlayerService);\n\n  function PlayerService(hostname, credentials, options) {\n    _classCallCheck(this, PlayerService);\n\n    return _super.call(this, hostname, credentials, options);\n  }\n\n  _createClass(PlayerService, [{\n    key: \"pointBit\",\n    value: function pointBit(request, metadata, callback) {\n      _get(_getPrototypeOf(PlayerService.prototype), \"pointBit\", this).call(this, request, metadata, callback);\n\n      if (false) return;\n\n      if (!client) {\n        client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n      }\n\n      console.log('PlayerService.prototype.pointBit request => ', request);\n\n      var _request$array = _slicedToArray(request.array, 4),\n          a = _request$array[0],\n          b = _request$array[1],\n          c = _request$array[2],\n          d = _request$array[3];\n\n      var clientMessage = new ClientMessage();\n      clientMessage.setA(a);\n      clientMessage.setB(b);\n      clientMessage.setC(c);\n      clientMessage.setD(d);\n\n      if (client) {\n        client.pointBit(clientMessage, undefined, function (err, response) {\n          if (err) {\n            console.error(err);\n          } else {\n            console.log('response', response.toObject());\n          }\n        });\n      }\n    }\n  }]);\n\n  return PlayerService;\n}(PlayerServiceClient); // PlayerService.prototype.join = function join(params:ClientMessage) {\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA('542')\n//     clientMessage.setB('234')\n//     clientMessage.setC('1252')\n//     clientMessage.setD('2345')\n//     const stream = client.pointBit(clientMessage);\n//     stream.on('data', (message: ServerMessage) => {\n//         console.log(`client received$ ${message}`)\n//     });\n// }\n//\n// PlayerService.prototype.send = function (params:ClientMessage) {\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA(params.getA());\n//     clientMessage.setB(params.getB());\n//     clientMessage.setC(params.getC());\n//     clientMessage.setD(params.getD());\n//     client.pointBit(\n//         clientMessage,\n//         undefined,\n//         (err: any, response: ServerMessage) => {\n//             if (err) {\n//                 console.error(err);\n//             } else {\n//                 console.log('response', response.toObject());\n//                 (document.getElementById('message') as HTMLFormElement)!.value = '';\n//             }\n//         })\n// }\n// PlayerService.prototype.pointBit = function (ctx) {\n//     if (typeof window === 'undefined') return;\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//\n//     console.log('PlayerService.prototype.pointBit ctx => ', ctx)\n//     const [a, b, c, d] = ctx.array\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA(a);\n//     clientMessage.setB(b);\n//     clientMessage.setC(c);\n//     clientMessage.setD(d);\n//     if(client) {\n//         client.pointBit(\n//             clientMessage,\n//             undefined,\n//             (err: any, response: ServerMessage) => {\n//                 if (err) {\n//                     console.error(err);\n//                 } else {\n//                     console.log('response', response.toObject());\n//\n//                 }\n//             })\n//     }\n//\n// }\n\nexport default PlayerService;","map":{"version":3,"sources":["/Users/amit/Projects/sound-visualization/client/services/PlayerService.ts"],"names":["PlayerServiceClient","ClientMessage","client","PlayerService","hostname","credentials","options","request","metadata","callback","window","location","console","log","array","a","b","c","d","clientMessage","setA","setB","setC","setD","pointBit","undefined","err","response","error","toObject"],"mappings":";;;;;;;;;;;;AACA;AACA,SAASA,mBAAT,QAAoC,6BAApC;AACA,SAASC,aAAT,QAA6C,oBAA7C;AAEA,IAAIC,MAAJ;AAEA,WAAaC,aAAb;AAAA;;AAAA;;AACI,yBAAaC,QAAb,EACaC,WADb,EAEaC,OAFb,EAEyD;AAAA;;AAAA,6BAC/CF,QAD+C,EACrCC,WADqC,EACxBC,OADwB;AAGxD;;AANL;AAAA;AAAA,WAQI,kBAASC,OAAT,EAAiCC,QAAjC,EACSC,QADT,EAC0H;AACtH,kFAAeF,OAAf,EAAwBC,QAAxB,EAAkCC,QAAlC;;AAEA,iBAAmC;;AACnC,UAAI,CAACP,MAAL,EAAa;AACTA,QAAAA,MAAM,GAAG,IAAIF,mBAAJ,CAAwB,YAAYU,MAAM,CAACC,QAAP,CAAgBP,QAA5B,GAAuC,QAA/D,CAAT;AACH;;AAEDQ,MAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ,EAA4DN,OAA5D;;AAGA,0CAAqBA,OAAO,CAACO,KAA7B;AAAA,UAAOC,CAAP;AAAA,UAAUC,CAAV;AAAA,UAAaC,CAAb;AAAA,UAAgBC,CAAhB;;AACA,UAAMC,aAAa,GAAG,IAAIlB,aAAJ,EAAtB;AACAkB,MAAAA,aAAa,CAACC,IAAd,CAAmBL,CAAnB;AACAI,MAAAA,aAAa,CAACE,IAAd,CAAmBL,CAAnB;AACAG,MAAAA,aAAa,CAACG,IAAd,CAAmBL,CAAnB;AACAE,MAAAA,aAAa,CAACI,IAAd,CAAmBL,CAAnB;;AACA,UAAGhB,MAAH,EAAW;AACPA,QAAAA,MAAM,CAACsB,QAAP,CACIL,aADJ,EAEIM,SAFJ,EAGI,UAACC,GAAD,EAAWC,QAAX,EAAuC;AACnC,cAAID,GAAJ,EAAS;AACLd,YAAAA,OAAO,CAACgB,KAAR,CAAcF,GAAd;AACH,WAFD,MAEO;AACHd,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBc,QAAQ,CAACE,QAAT,EAAxB;AAEH;AACJ,SAVL;AAWH;AAGJ;AAzCL;;AAAA;AAAA,EAAmC7B,mBAAnC,E,CA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAeG,aAAf","sourcesContent":["import * as grpcWeb from 'grpc-web';\n//import {RpcError as GrpcWebError} from 'grpc-web';\nimport { PlayerServiceClient } from '../proto/player_grpc_web_pb';\nimport { ClientMessage, ServerMessage } from '../proto/player_pb';\n\nlet client\n\nexport class PlayerService extends PlayerServiceClient  {\n    constructor (hostname: string,\n                 credentials?: null,\n                 options?: null | { [index: string]: any; }) {\n        super(hostname, credentials, options)\n\n    }\n\n    pointBit(request: ClientMessage, metadata: grpcWeb.Metadata | undefined,\n             callback: (err: grpcWeb.RpcError, response: ServerMessage) => void): grpcWeb.ClientReadableStream<ServerMessage> {\n        super.pointBit(request, metadata, callback);\n\n        if (typeof window === 'undefined') return;\n        if (!client) {\n            client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n        }\n\n        console.log('PlayerService.prototype.pointBit request => ', request)\n\n\n        const [a, b, c, d] = request.array\n        const clientMessage = new ClientMessage();\n        clientMessage.setA(a);\n        clientMessage.setB(b);\n        clientMessage.setC(c);\n        clientMessage.setD(d);\n        if(client) {\n            client.pointBit(\n                clientMessage,\n                undefined,\n                (err: any, response: ServerMessage) => {\n                    if (err) {\n                        console.error(err);\n                    } else {\n                        console.log('response', response.toObject());\n\n                    }\n                })\n        }\n\n\n    }\n\n\n\n}\n\n// PlayerService.prototype.join = function join(params:ClientMessage) {\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA('542')\n//     clientMessage.setB('234')\n//     clientMessage.setC('1252')\n//     clientMessage.setD('2345')\n//     const stream = client.pointBit(clientMessage);\n//     stream.on('data', (message: ServerMessage) => {\n//         console.log(`client received$ ${message}`)\n//     });\n// }\n//\n// PlayerService.prototype.send = function (params:ClientMessage) {\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA(params.getA());\n//     clientMessage.setB(params.getB());\n//     clientMessage.setC(params.getC());\n//     clientMessage.setD(params.getD());\n//     client.pointBit(\n//         clientMessage,\n//         undefined,\n//         (err: any, response: ServerMessage) => {\n//             if (err) {\n//                 console.error(err);\n//             } else {\n//                 console.log('response', response.toObject());\n//                 (document.getElementById('message') as HTMLFormElement)!.value = '';\n//             }\n//         })\n// }\n\n// PlayerService.prototype.pointBit = function (ctx) {\n//     if (typeof window === 'undefined') return;\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//\n//     console.log('PlayerService.prototype.pointBit ctx => ', ctx)\n//     const [a, b, c, d] = ctx.array\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA(a);\n//     clientMessage.setB(b);\n//     clientMessage.setC(c);\n//     clientMessage.setD(d);\n//     if(client) {\n//         client.pointBit(\n//             clientMessage,\n//             undefined,\n//             (err: any, response: ServerMessage) => {\n//                 if (err) {\n//                     console.error(err);\n//                 } else {\n//                     console.log('response', response.toObject());\n//\n//                 }\n//             })\n//     }\n//\n// }\n\n\nexport default PlayerService\n"]},"metadata":{},"sourceType":"module"}