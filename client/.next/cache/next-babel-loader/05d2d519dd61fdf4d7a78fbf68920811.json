{"ast":null,"code":"export default function fromElement(element_id, canvas_id, options) {\n  const globalAccessKey = [options.globalAccessKey || '$wave'];\n\n  const initGlobalObject = elementId => {\n    window[globalAccessKey] = window[globalAccessKey] || {};\n    window[globalAccessKey][elementId] = window[globalAccessKey][elementId] || {};\n  };\n\n  const getGlobal = options['getGlobal'] || function (elementId, accessKey) {\n    initGlobalObject(elementId);\n    return window[globalAccessKey][elementId][accessKey];\n  };\n\n  const setGlobal = options['setGlobal'] || function (elementId, accessKey, value) {\n    let returnValue = getGlobal(elementId);\n\n    if (!returnValue) {\n      window[globalAccessKey][elementId][accessKey] = window[globalAccessKey][elementId][accessKey] || value;\n      returnValue = window[globalAccessKey][elementId][accessKey];\n    }\n\n    return returnValue;\n  };\n\n  const waveContext = this;\n  let element = document.getElementById(element_id);\n  if (!element) return;\n  element.crossOrigin = 'anonymous';\n\n  function run() {\n    //user gesture has happened\n    this.activated = true; //track current wave for canvas\n\n    this.activeCanvas = this.activeCanvas || {};\n    this.activeCanvas[canvas_id] = JSON.stringify(options); //track elements used so multiple elements use the same data\n\n    this.activeElements[element_id] = this.activeElements[element_id] || {};\n    if (this.activeElements[element_id].count) this.activeElements[element_id].count += 1;else this.activeElements[element_id].count = 1;\n    const currentCount = this.activeElements[element_id].count;\n    const audioCtx = setGlobal(element.id, 'audioCtx', new AudioContext());\n    const analyser = setGlobal(element.id, 'analyser', audioCtx.createAnalyser());\n    let source = getGlobal(element.id, 'source');\n\n    if (source) {\n      if (source.mediaElement !== element) {\n        source = audioCtx.createMediaElementSource(element);\n      }\n    } else {\n      source = audioCtx.createMediaElementSource(element);\n    }\n\n    setGlobal(element.id, 'source', source); //beep test for ios\n\n    const oscillator = audioCtx.createOscillator();\n    oscillator.frequency.value = 1;\n    oscillator.connect(audioCtx.destination);\n    oscillator.start(0);\n    oscillator.stop(0);\n    source.connect(analyser);\n    source.connect(audioCtx.destination);\n    analyser.fftsize = 32768;\n    const bufferLength = analyser.frequencyBinCount;\n    const data = new Uint8Array(bufferLength);\n    let frameCount = 1;\n\n    function renderFrame() {\n      //only run one wave visual per canvas\n      if (JSON.stringify(options) !== this.activeCanvas[canvas_id]) {\n        return;\n      } //if the element or canvas go out of scope, stop animation\n\n\n      if (!document.getElementById(element_id) || !document.getElementById(canvas_id)) return;\n      requestAnimationFrame(renderFrame);\n      frameCount++; //check if this element is the last to be called\n\n      if (!(currentCount < this.activeElements[element_id].count)) {\n        analyser.getByteFrequencyData(data);\n        this.activeElements[element_id].data = data;\n      }\n\n      this.visualize(this.activeElements[element_id].data, canvas_id, options, frameCount);\n    }\n\n    renderFrame = renderFrame.bind(this);\n    renderFrame();\n  }\n\n  const create = () => {\n    //remove all events\n    ;\n    ['touchstart', 'touchmove', 'touchend', 'mouseup', 'click', 'play'].forEach(event => {\n      element.removeEventListener(event, create, {\n        once: true\n      });\n    });\n    run.call(waveContext);\n  };\n\n  if (this.activated || options['skipUserEventsWatcher']) {\n    run.call(waveContext);\n  } else {\n    //wait for a valid user gesture\n    document.body.addEventListener('touchstart', create, {\n      once: true\n    });\n    document.body.addEventListener('touchmove', create, {\n      once: true\n    });\n    document.body.addEventListener('touchend', create, {\n      once: true\n    });\n    document.body.addEventListener('mouseup', create, {\n      once: true\n    });\n    document.body.addEventListener('click', create, {\n      once: true\n    });\n    element.addEventListener('play', create, {\n      once: true\n    });\n  }\n}","map":{"version":3,"sources":["/Users/amit/Projects/sound-visualization/client/lib/wave-visualizer/fromElement.js"],"names":["fromElement","element_id","canvas_id","options","globalAccessKey","initGlobalObject","elementId","window","getGlobal","accessKey","setGlobal","value","returnValue","waveContext","element","document","getElementById","crossOrigin","run","activated","activeCanvas","JSON","stringify","activeElements","count","currentCount","audioCtx","id","AudioContext","analyser","createAnalyser","source","mediaElement","createMediaElementSource","oscillator","createOscillator","frequency","connect","destination","start","stop","fftsize","bufferLength","frequencyBinCount","data","Uint8Array","frameCount","renderFrame","requestAnimationFrame","getByteFrequencyData","visualize","bind","create","forEach","event","removeEventListener","once","call","body","addEventListener"],"mappings":"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","sourcesContent":["export default function fromElement(element_id, canvas_id, options) {\n  const globalAccessKey = [options.globalAccessKey || '$wave']\n  const initGlobalObject = (elementId) => {\n    window[globalAccessKey] = window[globalAccessKey] || {}\n    window[globalAccessKey][elementId] =\n      window[globalAccessKey][elementId] || {}\n  }\n\n  const getGlobal =\n    options['getGlobal'] ||\n    function (elementId, accessKey) {\n      initGlobalObject(elementId)\n      return window[globalAccessKey][elementId][accessKey]\n    }\n\n  const setGlobal =\n    options['setGlobal'] ||\n    function (elementId, accessKey, value) {\n      let returnValue = getGlobal(elementId)\n      if (!returnValue) {\n        window[globalAccessKey][elementId][accessKey] =\n          window[globalAccessKey][elementId][accessKey] || value\n        returnValue = window[globalAccessKey][elementId][accessKey]\n      }\n      return returnValue\n    }\n\n  const waveContext = this\n  let element = document.getElementById(element_id)\n  if (!element) return\n  element.crossOrigin = 'anonymous'\n\n  function run() {\n    //user gesture has happened\n    this.activated = true\n\n    //track current wave for canvas\n    this.activeCanvas = this.activeCanvas || {}\n    this.activeCanvas[canvas_id] = JSON.stringify(options)\n\n    //track elements used so multiple elements use the same data\n    this.activeElements[element_id] = this.activeElements[element_id] || {}\n    if (this.activeElements[element_id].count)\n      this.activeElements[element_id].count += 1\n    else this.activeElements[element_id].count = 1\n\n    const currentCount = this.activeElements[element_id].count\n\n    const audioCtx = setGlobal(element.id, 'audioCtx', new AudioContext())\n    const analyser = setGlobal(\n      element.id,\n      'analyser',\n      audioCtx.createAnalyser(),\n    )\n\n    let source = getGlobal(element.id, 'source')\n    if (source) {\n      if (source.mediaElement !== element) {\n        source = audioCtx.createMediaElementSource(element)\n      }\n    } else {\n      source = audioCtx.createMediaElementSource(element)\n    }\n    setGlobal(element.id, 'source', source)\n\n    //beep test for ios\n    const oscillator = audioCtx.createOscillator()\n    oscillator.frequency.value = 1\n    oscillator.connect(audioCtx.destination)\n    oscillator.start(0)\n    oscillator.stop(0)\n\n    source.connect(analyser)\n    source.connect(audioCtx.destination)\n\n    analyser.fftsize = 32768\n    const bufferLength = analyser.frequencyBinCount\n    const data = new Uint8Array(bufferLength)\n    let frameCount = 1\n\n    function renderFrame() {\n      //only run one wave visual per canvas\n      if (JSON.stringify(options) !== this.activeCanvas[canvas_id]) {\n        return\n      }\n\n      //if the element or canvas go out of scope, stop animation\n      if (\n        !document.getElementById(element_id) ||\n        !document.getElementById(canvas_id)\n      )\n        return\n\n      requestAnimationFrame(renderFrame)\n      frameCount++\n\n      //check if this element is the last to be called\n      if (!(currentCount < this.activeElements[element_id].count)) {\n        analyser.getByteFrequencyData(data)\n        this.activeElements[element_id].data = data\n      }\n\n      this.visualize(\n        this.activeElements[element_id].data,\n        canvas_id,\n        options,\n        frameCount,\n      )\n    }\n\n    renderFrame = renderFrame.bind(this)\n    renderFrame()\n  }\n\n  const create = () => {\n    //remove all events\n    ;[\n      'touchstart',\n      'touchmove',\n      'touchend',\n      'mouseup',\n      'click',\n      'play',\n    ].forEach((event) => {\n      element.removeEventListener(event, create, {once: true})\n    })\n\n    run.call(waveContext)\n  }\n\n  if (this.activated || options['skipUserEventsWatcher']) {\n    run.call(waveContext)\n  } else {\n    //wait for a valid user gesture\n    document.body.addEventListener('touchstart', create, {once: true})\n    document.body.addEventListener('touchmove', create, {once: true})\n    document.body.addEventListener('touchend', create, {once: true})\n    document.body.addEventListener('mouseup', create, {once: true})\n    document.body.addEventListener('click', create, {once: true})\n    element.addEventListener('play', create, {once: true})\n  }\n}\n"]},"metadata":{},"sourceType":"module"}