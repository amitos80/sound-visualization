{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useLayoutEffect } from 'react';\nimport FluidAnimation from 'react-fluid-animation'; //import {ToastContainer, toast} from 'react-toastify'\n\nimport Wave from '../utils/wave-visualizer';\nimport { take, fill, sum, floor } from 'lodash';\nimport { ClientMessage, ServerMessage } from '../proto/player_pb';\nconst COMPRESSION_FACTOR = 8;\n\nconst {\n  PlayerService\n} = require('../services');\n\nconst randomWhole = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\nconst randomReal = (min, max) => Math.random() * (max - min) + min;\n\nconst defaultConfig = {\n  textureDownsample: 2,\n  densityDissipation: 0.9,\n  velocityDissipation: 0.91,\n  pressureDissipation: 1,\n  pressureIterations: 44,\n  curl: 0,\n  splatRadius: 0.0057\n};\nconst baseConfigs = [{\n  textureDownsample: 1,\n  densityDissipation: 0.98,\n  velocityDissipation: 0.99,\n  pressureDissipation: 0.8,\n  pressureIterations: 25,\n  curl: 30,\n  splatRadius: 0.005\n}, {\n  textureDownsample: 2,\n  densityDissipation: 0.9,\n  velocityDissipation: 0.91,\n  pressureDissipation: 1,\n  pressureIterations: 44,\n  curl: 0,\n  splatRadius: 0.0057\n}, {\n  textureDownsample: 0,\n  densityDissipation: 0.92,\n  velocityDissipation: 0.95,\n  pressureDissipation: 0.8,\n  pressureIterations: 10,\n  curl: 20,\n  splatRadius: 0.01\n}, {\n  textureDownsample: 1,\n  densityDissipation: 0.98,\n  velocityDissipation: 0.99,\n  pressureDissipation: 0.998,\n  pressureIterations: 19,\n  curl: 8,\n  splatRadius: 0.008\n}];\n\nfunction rect({\n  id,\n  x,\n  y,\n  width,\n  height,\n  fill = 'gray',\n  stroke = 'skyblue',\n  strokewidth = 2\n}) {\n  return {\n    x,\n    y,\n    id,\n    width,\n    height,\n    fill,\n    stroke,\n    strokewidth\n  };\n}\n\nlet factor = 0.1;\nlet joined = false;\nlet playerService;\nlet wave;\nexport const Home = props => {\n  const {\n    0: selectedIndex,\n    1: setSelectedIndex\n  } = useState(0);\n  const {\n    0: frameNumber,\n    1: setFrameNumber\n  } = useState(0);\n  const {\n    0: animationConfig,\n    1: setAnimationConfig\n  } = useState(baseConfigs);\n  const {\n    0: currentConfig,\n    1: setCurrentConfig\n  } = useState(defaultConfig);\n  const {\n    0: startInterval,\n    1: setStartInterval\n  } = useState();\n  let myRef = /*#__PURE__*/React.createRef();\n\n  const changeStyle = () => {\n    const newIndex = selectedIndex + 1 > configs.length - 1 ? 0 : selectedIndex + 1;\n    setSelectedIndex(newIndex); //toast('style changed');\n  };\n\n  const randomStyle = () => {\n    const configs = [...(animationConfig || [])];\n    configs.push({\n      textureDownsample: randomWhole(1, 3),\n      densityDissipation: randomReal(0.9, 0.99),\n      velocityDissipation: randomReal(0.9, 0.99),\n      pressureDissipation: randomReal(0.1, 0.9),\n      pressureIterations: randomWhole(1, 61),\n      curl: randomWhole(15, 35),\n      splatRadius: randomReal(0.003, 0.007)\n    });\n    const newIndex = configs.length - 1;\n    setSelectedIndex(newIndex);\n    setAnimationConfig(configs); //toast('random style');\n  };\n\n  function init() {\n    if (false) {\n      if (!wave) {\n        setTimeout(() => {\n          if (wave) return;\n          navigator.mediaDevices.getUserMedia({\n            audio: true\n          }).then(function (stream) {\n            const w = new Wave();\n            w.fromStream(stream, 'visual-canvas', {\n              type: 'shine',\n              colors: ['red', 'white', 'blue']\n            });\n            wave = w;\n            setInterval(createSampleAnimation, 2400);\n          }).catch(function (err) {\n            console.log(err.message);\n          });\n        }, 2400);\n      }\n\n      if (!playerService) {\n        playerService = new PlayerService();\n      }\n    }\n  }\n\n  function createSampleAnimation() {\n    var _wave, _wave$current_stream, _wave2, _wave2$current_stream, _wave2$current_stream2, _wave3, _wave3$current_stream;\n\n    if (true) return;\n    console.log(' createSampleAnimation wave ', wave);\n\n    if (!wave) {\n      init();\n      return;\n    }\n\n    console.log('wave?.current_stream?.data -> ', (_wave = wave) === null || _wave === void 0 ? void 0 : (_wave$current_stream = _wave.current_stream) === null || _wave$current_stream === void 0 ? void 0 : _wave$current_stream.data);\n    if (!((_wave2 = wave) !== null && _wave2 !== void 0 && (_wave2$current_stream = _wave2.current_stream) !== null && _wave2$current_stream !== void 0 && (_wave2$current_stream2 = _wave2$current_stream.data) !== null && _wave2$current_stream2 !== void 0 && _wave2$current_stream2.length)) return;\n    console.log(' createSampleAnimation 2 ');\n    const samples = Array.from((_wave3 = wave) === null || _wave3 === void 0 ? void 0 : (_wave3$current_stream = _wave3.current_stream) === null || _wave3$current_stream === void 0 ? void 0 : _wave3$current_stream.data);\n    const a1 = samples.splice(0, 50);\n    const a2 = samples.splice(51, 70);\n    const a3 = samples.splice(71, 110);\n    const a4 = samples.splice(111, 333); // const pctValue1 = (sum(a1) / a1.length) / 160 // bass / gain\n    // const pctValue2 = (sum(a2) / a2.length) / 150\n    // const pctValue3 = (sum(a3) / a3.length) / 210\n    // const pctValue4 = (sum(a4) / a4.length ) / 450\n    //console.log(' pctValue1 ', pctValue1, ' pctValue2 ', pctValue2, ' pctValue3 ', pctValue3, ' pctValue4 ', pctValue4 )\n\n    const a = sum(a1) / a1.length / 160; // bass / gain\n\n    const b = sum(a2) / a2.length / 150;\n    const c = sum(a3) / a3.length / 210;\n    const d = sum(a4) / a4.length / 450; //playerService.pointBit({a, b, c, d})\n\n    if (!playerService) {\n      playerService = new PlayerService();\n    }\n\n    console.log('a, b, c, d -> ', a, b, c, d);\n\n    if (playerService) {\n      console.log('playerService.pointBit a, b, c, d -> ', a, b, c, d);\n      const clientMessage = new ClientMessage();\n      clientMessage.setA(a);\n      clientMessage.setB(b);\n      clientMessage.setC(c);\n      clientMessage.setD(d);\n      playerService.pointBit(clientMessage);\n    }\n  }\n\n  const createNewConfig = () => {\n    let sample = fill(Array(COMPRESSION_FACTOR), 0).map((value, i) => {\n      var _wave4, _wave4$current_stream, _wave4$current_stream2, _wave5, _wave5$current_stream;\n\n      const sampleLength = (_wave4 = wave) === null || _wave4 === void 0 ? void 0 : (_wave4$current_stream = _wave4.current_stream) === null || _wave4$current_stream === void 0 ? void 0 : (_wave4$current_stream2 = _wave4$current_stream.data) === null || _wave4$current_stream2 === void 0 ? void 0 : _wave4$current_stream2.length;\n      if (!sampleLength) return 0;\n      const samples = Array.from((_wave5 = wave) === null || _wave5 === void 0 ? void 0 : (_wave5$current_stream = _wave5.current_stream) === null || _wave5$current_stream === void 0 ? void 0 : _wave5$current_stream.data);\n      const blockSize = sampleLength / COMPRESSION_FACTOR;\n      return sum(take(samples, floor(i * blockSize, floor(blockSize * (i + 1))))) || 0;\n    });\n    setCurrentConfig({\n      textureDownsample: 1,\n      densityDissipation: sample[0] / 154,\n      // 0.98,\n      velocityDissipation: sample[1] / 151,\n      ///0.99,\n      pressureDissipation: sample[2] / 110,\n      // 0.998,\n      pressureIterations: sample[3] / 23,\n      // 19,\n      curl: sample[4] / 11,\n      // 8,\n      splatRadius: 0.008\n    });\n  };\n\n  const isClient = false && window;\n  useEffect(() => {\n    init();\n  }, []);\n  return __jsx(\"div\", {\n    style: {\n      width: '100%',\n      height: '100vh',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      flexDirection: 'column'\n    }\n  }, __jsx(\"canvas\", {\n    id: \"visual-canvas\",\n    width: \"100\",\n    height: \"50\"\n  }), __jsx(\"span\", {\n    style: {\n      display: 'block',\n      position: 'relative',\n      width: '100%',\n      height: '90vh',\n      zIndex: 3\n    },\n    className: \"visual-container\"\n  }, __jsx(\"div\", {\n    onClick: changeStyle,\n    style: {\n      cursor: 'pointer',\n      top: '10px',\n      right: '10px',\n      zIndex: 4,\n      position: 'absolute',\n      background: 'green',\n      width: '40px',\n      height: '40px',\n      opacity: 0.5\n    }\n  }), __jsx(\"div\", {\n    onClick: randomStyle,\n    style: {\n      cursor: 'pointer',\n      top: '10px',\n      left: '10px',\n      zIndex: 4,\n      position: 'absolute',\n      background: 'purple',\n      width: '40px',\n      height: '40px',\n      opacity: 0.5\n    }\n  }), __jsx(FluidAnimation, {\n    ref: element => myRef = element,\n    className: \"anim\",\n    config: currentConfig\n  })));\n}; //<div draggable=\"true\" className=\"pointb\" style={{zIndex: 0, position: 'absolute', background: 'red', top: '200px', left: '90px', width: '50px', height: '50px' }} />\n\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}