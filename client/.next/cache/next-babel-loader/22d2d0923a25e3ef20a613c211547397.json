{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport drawDualbarsBlocks from './visuals/drawDualbarsBlocks.js'; //options:type,colors,stroke\n\nexport default function visualize(data, canvasId, options = {}, frame) {\n  //make a clone of options\n  options = _objectSpread({}, options); //options\n\n  if (!options.stroke) options.stroke = 1;\n  if (!options.colors) options.colors = ['#ff9234', '#ff9234'];\n  let canvas = document.getElementById(canvasId);\n  if (!canvas) return;\n  let ctx = canvas.getContext('2d');\n  let h = canvas.height;\n  let w = canvas.width;\n  ctx.strokeStyle = options.colors[0];\n  ctx.lineWidth = options.stroke;\n  const functionContext = {\n    data,\n    options,\n    ctx,\n    h,\n    w,\n    Helper: this.Helper,\n    canvasId\n  };\n  ctx.clearRect(0, 0, w, h);\n  ctx.beginPath();\n  drawDualbarsBlocks(functionContext);\n}","map":null,"metadata":{},"sourceType":"module"}