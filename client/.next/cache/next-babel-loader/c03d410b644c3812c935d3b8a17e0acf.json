{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//import {RpcError as GrpcWebError} from 'grpc-web';\nimport { PlayerServiceClient } from '../proto/player_grpc_web_pb';\nimport { ClientMessage } from '../proto/player_pb';\nexport class PlayerService extends PlayerServiceClient {\n  constructor(hostname, credentials, options) {\n    this.host = hostname || `http://${window.location.hostname}:50051`;\n    super(this.host, credentials, options);\n\n    _defineProperty(this, \"client\", void 0);\n\n    _defineProperty(this, \"host\", void 0);\n\n    if (true) return;\n\n    if (!this.client) {\n      this.client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n    }\n  }\n\n  pointBit(request, metadata, callback) {\n    super.pointBit(request, metadata, callback);\n    if (true) return;\n\n    if (!client) {\n      client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n    } //console.log('PlayerService.prototype.pointBit request => ', request)\n\n\n    const {\n      a,\n      b,\n      c,\n      d\n    } = request.toObject();\n    console.log('PlayerService.prototype.pointBit request => ', {\n      a,\n      b,\n      c,\n      d\n    });\n    const clientMessage = new ClientMessage();\n    clientMessage.setA(a);\n    clientMessage.setB(b);\n    clientMessage.setC(c);\n    clientMessage.setD(d);\n\n    if (client) {\n      client.pointBit(clientMessage, undefined, (err, response) => {\n        if (err) {\n          console.error(err);\n        } else {\n          console.log('response', response.toObject());\n        }\n      });\n    }\n  }\n\n} // PlayerService.prototype.join = function join(params:ClientMessage) {\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA('542')\n//     clientMessage.setB('234')\n//     clientMessage.setC('1252')\n//     clientMessage.setD('2345')\n//     const stream = client.pointBit(clientMessage);\n//     stream.on('data', (message: ServerMessage) => {\n//         console.log(`client received$ ${message}`)\n//     });\n// }\n//\n// PlayerService.prototype.send = function (params:ClientMessage) {\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA(params.getA());\n//     clientMessage.setB(params.getB());\n//     clientMessage.setC(params.getC());\n//     clientMessage.setD(params.getD());\n//     client.pointBit(\n//         clientMessage,\n//         undefined,\n//         (err: any, response: ServerMessage) => {\n//             if (err) {\n//                 console.error(err);\n//             } else {\n//                 console.log('response', response.toObject());\n//                 (document.getElementById('message') as HTMLFormElement)!.value = '';\n//             }\n//         })\n// }\n// PlayerService.prototype.pointBit = function (ctx) {\n//     if (typeof window === 'undefined') return;\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//\n//     console.log('PlayerService.prototype.pointBit ctx => ', ctx)\n//     const [a, b, c, d] = ctx.array\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA(a);\n//     clientMessage.setB(b);\n//     clientMessage.setC(c);\n//     clientMessage.setD(d);\n//     if(client) {\n//         client.pointBit(\n//             clientMessage,\n//             undefined,\n//             (err: any, response: ServerMessage) => {\n//                 if (err) {\n//                     console.error(err);\n//                 } else {\n//                     console.log('response', response.toObject());\n//\n//                 }\n//             })\n//     }\n//\n// }\n\nexport default PlayerService;","map":{"version":3,"sources":["/Users/amit/Projects/sound-visualization/client/services/PlayerService.ts"],"names":["PlayerServiceClient","ClientMessage","PlayerService","constructor","hostname","credentials","options","host","window","location","client","pointBit","request","metadata","callback","a","b","c","d","toObject","console","log","clientMessage","setA","setB","setC","setD","undefined","err","response","error"],"mappings":";;AACA;AACA,SAASA,mBAAT,QAAoC,6BAApC;AACA,SAASC,aAAT,QAA4C,oBAA5C;AAIA,OAAO,MAAMC,aAAN,SAA4BF,mBAA5B,CAAiD;AAIpDG,EAAAA,WAAW,CAAEC,QAAF,EACEC,WADF,EAEEC,OAFF,EAE8C;AAErD,SAAKC,IAAL,GAAYH,QAAQ,IAAK,UAASI,MAAM,CAACC,QAAP,CAAgBL,QAAS,QAA3D;AACA,UAAM,KAAKG,IAAX,EAAiBF,WAAjB,EAA8BC,OAA9B;;AAHqD;;AAAA;;AAIrD,cAAmC;;AAEnC,QAAI,CAAC,KAAKI,MAAV,EAAkB;AACd,WAAKA,MAAL,GAAc,IAAIV,mBAAJ,CAAwB,YAAYQ,MAAM,CAACC,QAAP,CAAgBL,QAA5B,GAAuC,QAA/D,CAAd;AACH;AACJ;;AAEDO,EAAAA,QAAQ,CAACC,OAAD,EAAyBC,QAAzB,EACCC,QADD,EACkH;AACtH,UAAMH,QAAN,CAAeC,OAAf,EAAwBC,QAAxB,EAAkCC,QAAlC;AAEA,cAAmC;;AACnC,QAAI,CAACJ,MAAL,EAAa;AACTA,MAAAA,MAAM,GAAG,IAAIV,mBAAJ,CAAwB,YAAYQ,MAAM,CAACC,QAAP,CAAgBL,QAA5B,GAAuC,QAA/D,CAAT;AACH,KANqH,CAQtH;;;AAGA,UAAM;AAACW,MAAAA,CAAD;AAAIC,MAAAA,CAAJ;AAAOC,MAAAA,CAAP;AAAUC,MAAAA;AAAV,QAAeN,OAAO,CAACO,QAAR,EAArB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ,EAA4D;AAACN,MAAAA,CAAD;AAAIC,MAAAA,CAAJ;AAAOC,MAAAA,CAAP;AAAUC,MAAAA;AAAV,KAA5D;AAEA,UAAMI,aAAa,GAAG,IAAIrB,aAAJ,EAAtB;AACAqB,IAAAA,aAAa,CAACC,IAAd,CAAmBR,CAAnB;AACAO,IAAAA,aAAa,CAACE,IAAd,CAAmBR,CAAnB;AACAM,IAAAA,aAAa,CAACG,IAAd,CAAmBR,CAAnB;AACAK,IAAAA,aAAa,CAACI,IAAd,CAAmBR,CAAnB;;AACA,QAAGR,MAAH,EAAW;AACPA,MAAAA,MAAM,CAACC,QAAP,CACIW,aADJ,EAEIK,SAFJ,EAGI,CAACC,GAAD,EAAWC,QAAX,KAAuC;AACnC,YAAID,GAAJ,EAAS;AACLR,UAAAA,OAAO,CAACU,KAAR,CAAcF,GAAd;AACH,SAFD,MAEO;AACHR,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBQ,QAAQ,CAACV,QAAT,EAAxB;AAEH;AACJ,OAVL;AAWH;AAGJ;;AArDmD,C,CA2DxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAejB,aAAf","sourcesContent":["import * as grpcWeb from 'grpc-web';\n//import {RpcError as GrpcWebError} from 'grpc-web';\nimport { PlayerServiceClient } from '../proto/player_grpc_web_pb';\nimport { ClientMessage, ServerMessage} from '../proto/player_pb';\n\n\n\nexport class PlayerService extends PlayerServiceClient  {\n    private client: any;\n    private host: string;\n\n    constructor (hostname: string,\n                 credentials?: null,\n                 options?: null | { [index: string]: any; }) {\n\n        this.host = hostname || `http://${window.location.hostname}:50051`\n        super(this.host, credentials, options)\n        if (typeof window === 'undefined') return;\n\n        if (!this.client) {\n            this.client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n        }\n    }\n\n    pointBit(request: ClientMessage, metadata: grpcWeb.Metadata | undefined,\n             callback: (err: grpcWeb.RpcError, response: ServerMessage) => void): grpcWeb.ClientReadableStream<ServerMessage> {\n        super.pointBit(request, metadata, callback);\n\n        if (typeof window === 'undefined') return;\n        if (!client) {\n            client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n        }\n\n        //console.log('PlayerService.prototype.pointBit request => ', request)\n\n\n        const {a, b, c, d} = request.toObject()\n\n        console.log('PlayerService.prototype.pointBit request => ', {a, b, c, d})\n\n        const clientMessage = new ClientMessage();\n        clientMessage.setA(a);\n        clientMessage.setB(b);\n        clientMessage.setC(c);\n        clientMessage.setD(d);\n        if(client) {\n            client.pointBit(\n                clientMessage,\n                undefined,\n                (err: any, response: ServerMessage) => {\n                    if (err) {\n                        console.error(err);\n                    } else {\n                        console.log('response', response.toObject());\n\n                    }\n                })\n        }\n\n\n    }\n\n\n\n}\n\n// PlayerService.prototype.join = function join(params:ClientMessage) {\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA('542')\n//     clientMessage.setB('234')\n//     clientMessage.setC('1252')\n//     clientMessage.setD('2345')\n//     const stream = client.pointBit(clientMessage);\n//     stream.on('data', (message: ServerMessage) => {\n//         console.log(`client received$ ${message}`)\n//     });\n// }\n//\n// PlayerService.prototype.send = function (params:ClientMessage) {\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA(params.getA());\n//     clientMessage.setB(params.getB());\n//     clientMessage.setC(params.getC());\n//     clientMessage.setD(params.getD());\n//     client.pointBit(\n//         clientMessage,\n//         undefined,\n//         (err: any, response: ServerMessage) => {\n//             if (err) {\n//                 console.error(err);\n//             } else {\n//                 console.log('response', response.toObject());\n//                 (document.getElementById('message') as HTMLFormElement)!.value = '';\n//             }\n//         })\n// }\n\n// PlayerService.prototype.pointBit = function (ctx) {\n//     if (typeof window === 'undefined') return;\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//\n//     console.log('PlayerService.prototype.pointBit ctx => ', ctx)\n//     const [a, b, c, d] = ctx.array\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA(a);\n//     clientMessage.setB(b);\n//     clientMessage.setC(c);\n//     clientMessage.setD(d);\n//     if(client) {\n//         client.pointBit(\n//             clientMessage,\n//             undefined,\n//             (err: any, response: ServerMessage) => {\n//                 if (err) {\n//                     console.error(err);\n//                 } else {\n//                     console.log('response', response.toObject());\n//\n//                 }\n//             })\n//     }\n//\n// }\n\n\nexport default PlayerService\n"]},"metadata":{},"sourceType":"module"}