{"ast":null,"code":"import * as grpc from '@grpc/grpc-js';\nimport * as protoLoader from '@grpc/proto-loader'; //import { ProtoGrpcType } from '../proto/player.proto';\n\nvar host = '0.0.0.0:50051';\nvar packageDefinition = protoLoader.loadSync('./proto/example.proto');\nvar proto = grpc.loadPackageDefinition(packageDefinition); //as unknown as ProtoGrpcType;\n// @ts-ignore\n\nvar client = new proto.player.PlayerService(host, grpc.credentials.createInsecure());\nvar stream = null;\nvar deadline = new Date();\ndeadline.setSeconds(deadline.getSeconds() + 15);\nclient.waitForReady(deadline, function (error) {\n  if (error) {\n    console.log(\"Client connect error: \".concat(error.message));\n  }\n});\nexport function updateSample(params) {\n  client.unaryCall(params, // {\n  //     clientMessage: 'Message from client',\n  // },\n  function (error, serverMessage) {\n    if (error) {\n      console.error(error.message);\n    } else if (serverMessage) {\n      console.log(\"(client) Got server message: \".concat(serverMessage.serverMessage));\n    }\n  });\n}\n\nfunction doServerStreamingCall() {\n  var stream = client.serverStreamingCall({\n    clientMessage: 'Message from client'\n  });\n  stream.on('data', function (serverMessage) {\n    console.log(\"(client) Got server message: \".concat(serverMessage.serverMessage));\n  });\n}\n\nfunction doClientStreamingCall() {\n  var stream = client.clientStreamingCall(function (error) {\n    if (error) {\n      console.error(error.message);\n    }\n  });\n  stream.write({\n    clientMessage: 'Message from client'\n  });\n}\n\nfunction doBidirectionalStreamingCall() {\n  var stream = client.bidirectionalStreamingCall(); // Server stream\n\n  stream.on('data', function (serverMessage) {\n    console.log(\"(client) Got server message: \".concat(serverMessage.serverMessage));\n  }); // Client stream\n\n  stream.write({\n    clientMessage: 'Message from client'\n  });\n}","map":null,"metadata":{},"sourceType":"module"}