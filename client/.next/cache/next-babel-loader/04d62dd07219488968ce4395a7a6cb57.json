{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n//import {RpcError as GrpcWebError} from 'grpc-web';\nimport { PlayerServiceClient } from '../proto/player_grpc_web_pb';\nimport { ClientMessage } from '../proto/player_pb';\nexport var PlayerService = /*#__PURE__*/function (_PlayerServiceClient) {\n  _inherits(PlayerService, _PlayerServiceClient);\n\n  var _super = _createSuper(PlayerService);\n\n  function PlayerService(hostname, credentials, options) {\n    var _this;\n\n    _classCallCheck(this, PlayerService);\n\n    if (false) return _possibleConstructorReturn(_this);\n    var address = hostname || \"http://\".concat(window.location.hostname, \":50051\");\n    _this = _super.call(this, address, credentials, options);\n\n    _defineProperty(_assertThisInitialized(_this), \"client\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"host\", void 0);\n\n    _this.host = address;\n\n    if (!_this.client) {\n      _this.client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n    }\n\n    return _this;\n  }\n\n  _createClass(PlayerService, [{\n    key: \"pointBit\",\n    value: function pointBit(request, metadata, callback) {\n      //super.pointBit(request, metadata, callback);\n      if (false) return;\n\n      if (!this.client) {\n        this.client = new PlayerServiceClient('http://localhost:50051');\n      } //console.log('PlayerService.prototype.pointBit request => ', request)\n\n\n      var _request$toObject = request.toObject(),\n          a = _request$toObject.a,\n          b = _request$toObject.b,\n          c = _request$toObject.c,\n          d = _request$toObject.d;\n\n      console.log('PlayerService.prototype.pointBit request => ', {\n        a: a,\n        b: b,\n        c: c,\n        d: d\n      });\n      var clientMessage = new ClientMessage();\n      clientMessage.setA(a);\n      clientMessage.setB(b);\n      clientMessage.setC(c);\n      clientMessage.setD(d);\n\n      if (this.client) {\n        this.client.pointBit(clientMessage, undefined, function (err, response) {\n          if (err) {\n            console.error(err);\n          } else {\n            console.log('response', response.toObject());\n          }\n        });\n      }\n    }\n  }]);\n\n  return PlayerService;\n}(PlayerServiceClient); // PlayerService.prototype.join = function join(params:ClientMessage) {\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA('542')\n//     clientMessage.setB('234')\n//     clientMessage.setC('1252')\n//     clientMessage.setD('2345')\n//     const stream = client.pointBit(clientMessage);\n//     stream.on('data', (message: ServerMessage) => {\n//         console.log(`client received$ ${message}`)\n//     });\n// }\n//\n// PlayerService.prototype.send = function (params:ClientMessage) {\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA(params.getA());\n//     clientMessage.setB(params.getB());\n//     clientMessage.setC(params.getC());\n//     clientMessage.setD(params.getD());\n//     client.pointBit(\n//         clientMessage,\n//         undefined,\n//         (err: any, response: ServerMessage) => {\n//             if (err) {\n//                 console.error(err);\n//             } else {\n//                 console.log('response', response.toObject());\n//                 (document.getElementById('message') as HTMLFormElement)!.value = '';\n//             }\n//         })\n// }\n// PlayerService.prototype.pointBit = function (ctx) {\n//     if (typeof window === 'undefined') return;\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//\n//     console.log('PlayerService.prototype.pointBit ctx => ', ctx)\n//     const [a, b, c, d] = ctx.array\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA(a);\n//     clientMessage.setB(b);\n//     clientMessage.setC(c);\n//     clientMessage.setD(d);\n//     if(client) {\n//         client.pointBit(\n//             clientMessage,\n//             undefined,\n//             (err: any, response: ServerMessage) => {\n//                 if (err) {\n//                     console.error(err);\n//                 } else {\n//                     console.log('response', response.toObject());\n//\n//                 }\n//             })\n//     }\n//\n// }\n\nexport default PlayerService;","map":{"version":3,"sources":["/Users/amit/Projects/sound-visualization/client/services/PlayerService.ts"],"names":["PlayerServiceClient","ClientMessage","PlayerService","hostname","credentials","options","address","window","location","host","client","request","metadata","callback","toObject","a","b","c","d","console","log","clientMessage","setA","setB","setC","setD","pointBit","undefined","err","response","error"],"mappings":";;;;;;;;;;;;AACA;AACA,SAASA,mBAAT,QAAoC,6BAApC;AACA,SAASC,aAAT,QAA4C,oBAA5C;AAIA,WAAaC,aAAb;AAAA;;AAAA;;AAII,yBAAaC,QAAb,EACaC,WADb,EAEaC,OAFb,EAEyD;AAAA;;AAAA;;AACrD,eAAmC;AAEnC,QAAMC,OAAO,GAAGH,QAAQ,qBAAcI,MAAM,CAACC,QAAP,CAAgBL,QAA9B,WAAxB;AACA,8BAAMG,OAAN,EAAeF,WAAf,EAA4BC,OAA5B;;AAJqD;;AAAA;;AAKrD,UAAKI,IAAL,GAAYH,OAAZ;;AAEA,QAAI,CAAC,MAAKI,MAAV,EAAkB;AACd,YAAKA,MAAL,GAAc,IAAIV,mBAAJ,CAAwB,YAAYO,MAAM,CAACC,QAAP,CAAgBL,QAA5B,GAAuC,QAA/D,CAAd;AACH;;AAToD;AAUxD;;AAhBL;AAAA;AAAA,WAkBI,kBAASQ,OAAT,EAAiCC,QAAjC,EACSC,QADT,EAC0H;AACtH;AAEA,iBAAmC;;AACnC,UAAI,CAAC,KAAKH,MAAV,EAAkB;AACd,aAAKA,MAAL,GAAc,IAAIV,mBAAJ,CAAwB,wBAAxB,CAAd;AACH,OANqH,CAQtH;;;AAGA,8BAAqBW,OAAO,CAACG,QAAR,EAArB;AAAA,UAAOC,CAAP,qBAAOA,CAAP;AAAA,UAAUC,CAAV,qBAAUA,CAAV;AAAA,UAAaC,CAAb,qBAAaA,CAAb;AAAA,UAAgBC,CAAhB,qBAAgBA,CAAhB;;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ,EAA4D;AAACL,QAAAA,CAAC,EAADA,CAAD;AAAIC,QAAAA,CAAC,EAADA,CAAJ;AAAOC,QAAAA,CAAC,EAADA,CAAP;AAAUC,QAAAA,CAAC,EAADA;AAAV,OAA5D;AAEA,UAAMG,aAAa,GAAG,IAAIpB,aAAJ,EAAtB;AACAoB,MAAAA,aAAa,CAACC,IAAd,CAAmBP,CAAnB;AACAM,MAAAA,aAAa,CAACE,IAAd,CAAmBP,CAAnB;AACAK,MAAAA,aAAa,CAACG,IAAd,CAAmBP,CAAnB;AACAI,MAAAA,aAAa,CAACI,IAAd,CAAmBP,CAAnB;;AACA,UAAG,KAAKR,MAAR,EAAgB;AACZ,aAAKA,MAAL,CAAYgB,QAAZ,CACIL,aADJ,EAEIM,SAFJ,EAGI,UAACC,GAAD,EAAWC,QAAX,EAAuC;AACnC,cAAID,GAAJ,EAAS;AACLT,YAAAA,OAAO,CAACW,KAAR,CAAcF,GAAd;AACH,WAFD,MAEO;AACHT,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBS,QAAQ,CAACf,QAAT,EAAxB;AAEH;AACJ,SAVL;AAWH;AAGJ;AAtDL;;AAAA;AAAA,EAAmCd,mBAAnC,E,CA4DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAeE,aAAf","sourcesContent":["import * as grpcWeb from 'grpc-web';\n//import {RpcError as GrpcWebError} from 'grpc-web';\nimport { PlayerServiceClient } from '../proto/player_grpc_web_pb';\nimport { ClientMessage, ServerMessage} from '../proto/player_pb';\n\n\n\nexport class PlayerService extends PlayerServiceClient  {\n    private client: any;\n    private host: string;\n\n    constructor (hostname: string,\n                 credentials?: null,\n                 options?: null | { [index: string]: any; }) {\n        if (typeof window === 'undefined') return;\n\n        const address = hostname || `http://${window.location.hostname}:50051`\n        super(address, credentials, options)\n        this.host = address\n\n        if (!this.client) {\n            this.client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n        }\n    }\n\n    pointBit(request: ClientMessage, metadata: grpcWeb.Metadata | undefined,\n             callback: (err: grpcWeb.RpcError, response: ServerMessage) => void): grpcWeb.ClientReadableStream<ServerMessage> {\n        //super.pointBit(request, metadata, callback);\n\n        if (typeof window === 'undefined') return;\n        if (!this.client) {\n            this.client = new PlayerServiceClient('http://localhost:50051');\n        }\n\n        //console.log('PlayerService.prototype.pointBit request => ', request)\n\n\n        const {a, b, c, d} = request.toObject()\n\n        console.log('PlayerService.prototype.pointBit request => ', {a, b, c, d})\n\n        const clientMessage = new ClientMessage();\n        clientMessage.setA(a);\n        clientMessage.setB(b);\n        clientMessage.setC(c);\n        clientMessage.setD(d);\n        if(this.client) {\n            this.client.pointBit(\n                clientMessage,\n                undefined,\n                (err: any, response: ServerMessage) => {\n                    if (err) {\n                        console.error(err);\n                    } else {\n                        console.log('response', response.toObject());\n\n                    }\n                })\n        }\n\n\n    }\n\n\n\n}\n\n// PlayerService.prototype.join = function join(params:ClientMessage) {\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA('542')\n//     clientMessage.setB('234')\n//     clientMessage.setC('1252')\n//     clientMessage.setD('2345')\n//     const stream = client.pointBit(clientMessage);\n//     stream.on('data', (message: ServerMessage) => {\n//         console.log(`client received$ ${message}`)\n//     });\n// }\n//\n// PlayerService.prototype.send = function (params:ClientMessage) {\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA(params.getA());\n//     clientMessage.setB(params.getB());\n//     clientMessage.setC(params.getC());\n//     clientMessage.setD(params.getD());\n//     client.pointBit(\n//         clientMessage,\n//         undefined,\n//         (err: any, response: ServerMessage) => {\n//             if (err) {\n//                 console.error(err);\n//             } else {\n//                 console.log('response', response.toObject());\n//                 (document.getElementById('message') as HTMLFormElement)!.value = '';\n//             }\n//         })\n// }\n\n// PlayerService.prototype.pointBit = function (ctx) {\n//     if (typeof window === 'undefined') return;\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//\n//     console.log('PlayerService.prototype.pointBit ctx => ', ctx)\n//     const [a, b, c, d] = ctx.array\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA(a);\n//     clientMessage.setB(b);\n//     clientMessage.setC(c);\n//     clientMessage.setD(d);\n//     if(client) {\n//         client.pointBit(\n//             clientMessage,\n//             undefined,\n//             (err: any, response: ServerMessage) => {\n//                 if (err) {\n//                     console.error(err);\n//                 } else {\n//                     console.log('response', response.toObject());\n//\n//                 }\n//             })\n//     }\n//\n// }\n\n\nexport default PlayerService\n"]},"metadata":{},"sourceType":"module"}