{"ast":null,"code":"var _jsxFileName = \"/Users/amit/Projects/sound-visualization/client/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useLayoutEffect } from 'react';\nimport FluidAnimation from 'react-fluid-animation';\nimport { ToastContainer, toast } from 'react-toastify';\nimport Wave from '../lib/wave-visualizer';\nimport { take, fill, sum, floor } from 'lodash';\nimport { ClientMessage, ServerMessage } from '../proto/player_pb';\nconst COMPRESSION_FACTOR = 8;\n\nconst randomWhole = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\nconst randomReal = (min, max) => Math.random() * (max - min) + min;\n\nconst defaultConfig = {\n  textureDownsample: 2,\n  densityDissipation: 0.9,\n  velocityDissipation: 0.91,\n  pressureDissipation: 1,\n  pressureIterations: 44,\n  curl: 0,\n  splatRadius: 0.0057\n};\nconst baseConfigs = [{\n  textureDownsample: 1,\n  densityDissipation: 0.98,\n  velocityDissipation: 0.99,\n  pressureDissipation: 0.8,\n  pressureIterations: 25,\n  curl: 30,\n  splatRadius: 0.005\n}, {\n  textureDownsample: 2,\n  densityDissipation: 0.9,\n  velocityDissipation: 0.91,\n  pressureDissipation: 1,\n  pressureIterations: 44,\n  curl: 0,\n  splatRadius: 0.0057\n}, {\n  textureDownsample: 0,\n  densityDissipation: 0.92,\n  velocityDissipation: 0.95,\n  pressureDissipation: 0.8,\n  pressureIterations: 10,\n  curl: 20,\n  splatRadius: 0.01\n}, {\n  textureDownsample: 1,\n  densityDissipation: 0.98,\n  velocityDissipation: 0.99,\n  pressureDissipation: 0.998,\n  pressureIterations: 19,\n  curl: 8,\n  splatRadius: 0.008\n}];\n\nfunction rect({\n  id,\n  x,\n  y,\n  width,\n  height,\n  fill = 'gray',\n  stroke = 'skyblue',\n  strokewidth = 2\n}) {\n  return {\n    x,\n    y,\n    id,\n    width,\n    height,\n    fill,\n    stroke,\n    strokewidth\n  };\n}\n\nlet factor = 0.1;\nlet joined = false;\nlet PlayerService;\nexport const Home = props => {\n  const {\n    0: selectedIndex,\n    1: setSelectedIndex\n  } = useState(0);\n  const {\n    0: frameNumber,\n    1: setFrameNumber\n  } = useState(0);\n  const {\n    0: animationConfig,\n    1: setAnimationConfig\n  } = useState(baseConfigs);\n  const {\n    0: currentConfig,\n    1: setCurrentConfig\n  } = useState(defaultConfig);\n  const {\n    0: startInterval,\n    1: setStartInterval\n  } = useState();\n  let myRef = /*#__PURE__*/React.createRef();\n  let {\n    0: wave,\n    1: setWave\n  } = useState({});\n\n  const changeStyle = () => {\n    const newIndex = selectedIndex + 1 > configs.length - 1 ? 0 : selectedIndex + 1;\n    setSelectedIndex(newIndex);\n    toast('style changed');\n  };\n\n  const randomStyle = () => {\n    const configs = [...(animationConfig || [])];\n    configs.push({\n      textureDownsample: randomWhole(1, 3),\n      densityDissipation: randomReal(0.9, 0.99),\n      velocityDissipation: randomReal(0.9, 0.99),\n      pressureDissipation: randomReal(0.1, 0.9),\n      pressureIterations: randomWhole(1, 61),\n      curl: randomWhole(15, 35),\n      splatRadius: randomReal(0.003, 0.007)\n    });\n    const newIndex = configs.length - 1;\n    setSelectedIndex(newIndex);\n    setAnimationConfig(configs);\n    toast('random style');\n  };\n\n  const createSampleAnimation = () => {\n    var _wave$current_stream, _wave$current_stream$, _wave$current_stream2;\n\n    if (!(wave !== null && wave !== void 0 && (_wave$current_stream = wave.current_stream) !== null && _wave$current_stream !== void 0 && (_wave$current_stream$ = _wave$current_stream.data) !== null && _wave$current_stream$ !== void 0 && _wave$current_stream$.length)) return;\n    const samples = Array.from(wave === null || wave === void 0 ? void 0 : (_wave$current_stream2 = wave.current_stream) === null || _wave$current_stream2 === void 0 ? void 0 : _wave$current_stream2.data);\n    const a1 = samples.splice(0, 50);\n    const a2 = samples.splice(51, 70);\n    const a3 = samples.splice(71, 110);\n    const a4 = samples.splice(111, 333); // const pctValue1 = (sum(a1) / a1.length) / 160 // bass / gain\n    // const pctValue2 = (sum(a2) / a2.length) / 150\n    // const pctValue3 = (sum(a3) / a3.length) / 210\n    // const pctValue4 = (sum(a4) / a4.length ) / 450\n    //console.log(' pctValue1 ', pctValue1, ' pctValue2 ', pctValue2, ' pctValue3 ', pctValue3, ' pctValue4 ', pctValue4 )\n\n    const a = sum(a1) / a1.length / 160; // bass / gain\n\n    const b = sum(a2) / a2.length / 150;\n    const c = sum(a3) / a3.length / 210;\n    const d = sum(a4) / a4.length / 450; //playerService.pointBit({a, b, c, d})\n\n    if (PlayerService) {\n      const clientMessage = new ClientMessage();\n      clientMessage.setA(a);\n      clientMessage.setB(b);\n      clientMessage.setC(c);\n      clientMessage.setD(d);\n      PlayerService.send(clientMessage);\n    }\n  };\n\n  const createNewConfig = () => {\n    let sample = fill(Array(COMPRESSION_FACTOR), 0).map((value, i) => {\n      var _wave$current_stream3, _wave$current_stream4, _wave$current_stream5;\n\n      const sampleLength = wave === null || wave === void 0 ? void 0 : (_wave$current_stream3 = wave.current_stream) === null || _wave$current_stream3 === void 0 ? void 0 : (_wave$current_stream4 = _wave$current_stream3.data) === null || _wave$current_stream4 === void 0 ? void 0 : _wave$current_stream4.length;\n      if (!sampleLength) return 0;\n      const samples = Array.from(wave === null || wave === void 0 ? void 0 : (_wave$current_stream5 = wave.current_stream) === null || _wave$current_stream5 === void 0 ? void 0 : _wave$current_stream5.data);\n      const blockSize = sampleLength / COMPRESSION_FACTOR;\n      return sum(take(samples, floor(i * blockSize, floor(blockSize * (i + 1))))) || 0;\n    });\n    setCurrentConfig({\n      textureDownsample: 1,\n      densityDissipation: sample[0] / 154,\n      // 0.98,\n      velocityDissipation: sample[1] / 151,\n      ///0.99,\n      pressureDissipation: sample[2] / 110,\n      // 0.998,\n      pressureIterations: sample[3] / 23,\n      // 19,\n      curl: sample[4] / 11,\n      // 8,\n      splatRadius: 0.008\n    });\n  };\n\n  useEffect(() => {\n    if (false) {\n      navigator.mediaDevices.getUserMedia({\n        audio: true\n      }).then(function (stream) {\n        const wave = new Wave();\n        wave.fromStream(stream, 'visual-canvas', {\n          type: 'shine',\n          colors: ['red', 'white', 'blue']\n        });\n        setWave(wave);\n        setInterval(createSampleAnimation, 180);\n      }).catch(function (err) {\n        console.log(err.message);\n      });\n    }\n  }, []);\n  if (!wave) return null;\n\n  if (false && !joined && !PlayerService) {\n    PlayerService = require('../lib/grpc-client');\n    joined = true;\n    PlayerService.join();\n  }\n\n  return __jsx(React.Fragment, null, false && __jsx(\"script\", {\n    src: \"https://cdn.jsdelivr.net/gh/foobar404/wave.js/dist/bundle.iife.js\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 45\n    }\n  }), __jsx(\"canvas\", {\n    style: {\n      margin: 'auto'\n    },\n    id: \"visual-canvas\",\n    width: \"120\",\n    height: \"50\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }\n  }), __jsx(FluidAnimation, {\n    ref: element => myRef = element,\n    className: \"anim\",\n    config: currentConfig,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }), __jsx(ToastContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/amit/Projects/sound-visualization/client/pages/index.js"],"names":["React","useState","useEffect","useLayoutEffect","FluidAnimation","ToastContainer","toast","Wave","take","fill","sum","floor","ClientMessage","ServerMessage","COMPRESSION_FACTOR","randomWhole","min","max","Math","random","randomReal","defaultConfig","textureDownsample","densityDissipation","velocityDissipation","pressureDissipation","pressureIterations","curl","splatRadius","baseConfigs","rect","id","x","y","width","height","stroke","strokewidth","factor","joined","PlayerService","Home","props","selectedIndex","setSelectedIndex","frameNumber","setFrameNumber","animationConfig","setAnimationConfig","currentConfig","setCurrentConfig","startInterval","setStartInterval","myRef","createRef","wave","setWave","changeStyle","newIndex","configs","length","randomStyle","push","createSampleAnimation","current_stream","data","samples","Array","from","a1","splice","a2","a3","a4","a","b","c","d","clientMessage","setA","setB","setC","setD","send","createNewConfig","sample","map","value","i","sampleLength","blockSize","navigator","mediaDevices","getUserMedia","audio","then","stream","fromStream","type","colors","setInterval","catch","err","console","log","message","require","join","margin","element"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useLayoutEffect} from 'react'\nimport FluidAnimation from 'react-fluid-animation'\nimport {ToastContainer, toast} from 'react-toastify'\nimport Wave from '../lib/wave-visualizer'\nimport { take, fill, sum, floor } from 'lodash'\nimport { ClientMessage, ServerMessage } from '../proto/player_pb';\nconst COMPRESSION_FACTOR = 8\n\nconst randomWhole = (min, max) => Math.floor(Math.random() * (max - min) + min)\nconst randomReal = (min, max) => Math.random() * (max - min) + min\n\nconst defaultConfig =   {\n    textureDownsample: 2,\n    densityDissipation: 0.9,\n    velocityDissipation: 0.91,\n    pressureDissipation: 1,\n    pressureIterations: 44,\n    curl: 0,\n    splatRadius: 0.0057,\n}\n\nconst baseConfigs = [\n  {\n    textureDownsample: 1,\n    densityDissipation: 0.98,\n    velocityDissipation: 0.99,\n    pressureDissipation: 0.8,\n    pressureIterations: 25,\n    curl: 30,\n    splatRadius: 0.005,\n  },\n  {\n    textureDownsample: 2,\n    densityDissipation: 0.9,\n    velocityDissipation: 0.91,\n    pressureDissipation: 1,\n    pressureIterations: 44,\n    curl: 0,\n    splatRadius: 0.0057,\n  },\n  {\n    textureDownsample: 0,\n    densityDissipation: 0.92,\n    velocityDissipation: 0.95,\n    pressureDissipation: 0.8,\n    pressureIterations: 10,\n    curl: 20,\n    splatRadius: 0.01,\n  },\n  {\n    textureDownsample: 1,\n    densityDissipation: 0.98,\n    velocityDissipation: 0.99,\n    pressureDissipation: 0.998,\n    pressureIterations: 19,\n    curl: 8,\n    splatRadius: 0.008,\n  },\n]\n\nfunction rect({id, x, y, width, height, fill = 'gray', stroke = 'skyblue', strokewidth = 2}) {\n    return {\n        x, y, id, width, height, fill, stroke, strokewidth,\n    }\n}\n\nlet factor = 0.1\nlet joined = false\nlet PlayerService;\nexport const Home = (props) => {\n  const [selectedIndex, setSelectedIndex] = useState(0)\n  const [frameNumber, setFrameNumber] = useState(0)\n  const [animationConfig, setAnimationConfig] = useState(baseConfigs)\n  const [currentConfig, setCurrentConfig] = useState(defaultConfig)\n    const [startInterval, setStartInterval] = useState()\n  let myRef = React.createRef();\n  let [wave, setWave] = useState({})\n\n  const changeStyle = () => {\n      const newIndex = selectedIndex + 1 > configs.length -1 ? 0 : selectedIndex + 1;\n        setSelectedIndex(\n          newIndex\n       )\n\n      toast('style changed');\n  }\n\n  const randomStyle = () => {\n    const configs = [...(animationConfig || [])]\n    configs.push({\n        textureDownsample: randomWhole(1, 3),\n        densityDissipation: randomReal(0.9, 0.99),\n        velocityDissipation: randomReal(0.9, 0.99),\n        pressureDissipation: randomReal(0.1, 0.9),\n        pressureIterations: randomWhole(1, 61),\n        curl: randomWhole(15, 35),\n        splatRadius: randomReal(0.003, 0.007),\n    })\n    const newIndex = configs.length -1;\n    setSelectedIndex(\n        newIndex\n    )\n    setAnimationConfig(configs)\n    toast('random style');\n  }\n\n  const createSampleAnimation = () => {\n      if (!wave?.current_stream?.data?.length) return\n\n      const samples = Array.from(wave?.current_stream?.data)\n      const a1 = samples.splice(0, 50)\n      const a2 = samples.splice( 51, 70)\n      const a3 = samples.splice( 71, 110)\n      const a4 = samples.splice( 111, 333)\n\n      // const pctValue1 = (sum(a1) / a1.length) / 160 // bass / gain\n      // const pctValue2 = (sum(a2) / a2.length) / 150\n      // const pctValue3 = (sum(a3) / a3.length) / 210\n      // const pctValue4 = (sum(a4) / a4.length ) / 450\n      //console.log(' pctValue1 ', pctValue1, ' pctValue2 ', pctValue2, ' pctValue3 ', pctValue3, ' pctValue4 ', pctValue4 )\n\n       const a = (sum(a1) / a1.length) / 160 // bass / gain\n       const b = (sum(a2) / a2.length) / 150\n       const c = (sum(a3) / a3.length) / 210\n       const d = (sum(a4) / a4.length ) / 450\n      //playerService.pointBit({a, b, c, d})\n      if (PlayerService) {\n          const clientMessage = new ClientMessage();\n          clientMessage.setA(a)\n          clientMessage.setB(b)\n          clientMessage.setC(c)\n          clientMessage.setD(d)\n          PlayerService.send(clientMessage)\n      }\n  }\n\n  const createNewConfig = () => {\n      let sample = fill(Array(COMPRESSION_FACTOR), 0).map((value, i) => {\n          const sampleLength = wave?.current_stream?.data?.length\n          if (!sampleLength) return 0\n          const samples = Array.from(wave?.current_stream?.data)\n          const blockSize = sampleLength / COMPRESSION_FACTOR\n          return sum(take(samples,\n              floor(i * blockSize,\n                  floor(blockSize * (i + 1))))\n          ) || 0\n      })\n\n      setCurrentConfig({\n          textureDownsample: 1,\n          densityDissipation: sample[0] /154, // 0.98,\n          velocityDissipation: sample[1] / 151, ///0.99,\n          pressureDissipation: sample[2] / 110, // 0.998,\n          pressureIterations: sample[3] / 23, // 19,\n          curl: sample[4] / 11, // 8,\n          splatRadius: 0.008,\n      })\n  }\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      navigator.mediaDevices\n        .getUserMedia({\n          audio: true,\n        })\n        .then(function (stream) {\n          const wave = new Wave()\n\n          wave.fromStream(stream, 'visual-canvas', {\n            type: 'shine',\n            colors: ['red', 'white', 'blue'],\n          })\n\n          setWave(wave)\n          setInterval(createSampleAnimation, 180)\n        })\n        .catch(function (err) {\n          console.log(err.message)\n        })\n    }\n\n  }, [])\n\n  if (!wave) return  null\n  if ( typeof window !== 'undefined' && !joined && !PlayerService) {\n      PlayerService = require('../lib/grpc-client')\n      joined = true\n      PlayerService.join()\n  }\n\n  return (\n      <>\n          {typeof window !== 'undefined' && <script src=\"https://cdn.jsdelivr.net/gh/foobar404/wave.js/dist/bundle.iife.js\"></script>}\n\n          <canvas style={{margin: 'auto'}} id=\"visual-canvas\" width=\"120\" height=\"50\" />\n\n\n\n            <FluidAnimation\n                ref={element => myRef = element}\n                className='anim'\n                config={currentConfig}\n            />\n\n\n          <ToastContainer/>\n\n\n      </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}