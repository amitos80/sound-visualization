{"ast":null,"code":"export default function fromFile(file, options = {}) {\n  //options\n  if (!options.stroke) options.stroke = 10;\n  let audio = new Audio();\n  audio.src = file;\n  let audioCtx = new AudioContext();\n  let analyser = audioCtx.createAnalyser();\n  let source = audioCtx.createMediaElementSource(audio);\n  source.connect(analyser);\n  analyser.fftSize = 64;\n  let bufferLength = analyser.frequencyBinCount;\n  let file_data;\n  let temp_data = new Uint8Array(bufferLength);\n  let getWave;\n  let fdi = 0;\n  let self = this;\n  audio.addEventListener('loadedmetadata', async function () {\n    while (audio.duration === Infinity) {\n      await new Promise(r => setTimeout(r, 1000));\n      audio.currentTime = 10000000 * Math.random();\n    }\n\n    audio.currentTime = 0;\n    audio.play();\n  });\n\n  audio.onplay = function () {\n    let findSize = size => {\n      for (let range = 1; range <= 40; range++) {\n        let power = 2 ** range;\n        if (size <= power) return power;\n      }\n    };\n\n    let d = audio.duration;\n    audio.playbackRate = 16;\n    d = d / audio.playbackRate;\n    let drawRate = 20; //ms\n\n    let size = d / (drawRate / 1000) * (analyser.fftSize / 2);\n    size = findSize(size);\n    file_data = new Uint8Array(size);\n    getWave = setInterval(function () {\n      analyser.getByteFrequencyData(temp_data);\n\n      for (let data in temp_data) {\n        data = temp_data[data];\n        file_data[fdi] = data;\n        fdi++;\n      }\n    }, drawRate);\n  };\n\n  audio.onended = function () {\n    if (audio.currentTime === audio.duration && file_data !== undefined) {\n      clearInterval(getWave);\n      let canvas = document.createElement('canvas');\n      canvas.height = window.innerHeight;\n      canvas.width = window.innerWidth;\n      self.visualize(file_data, canvas, options);\n      let image = canvas.toDataURL('image/jpg');\n      self.onFileLoad(image);\n      canvas.remove();\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}