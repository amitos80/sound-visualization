{"ast":null,"code":"//import {RpcError as GrpcWebError} from 'grpc-web';\nimport { PlayerServiceClient } from '../proto/player_grpc_web_pb';\nimport { ClientMessage } from '../proto/player_pb';\nlet client;\nexport function PlayerService() {} // PlayerService.prototype.join = function join(params:ClientMessage) {\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA('542')\n//     clientMessage.setB('234')\n//     clientMessage.setC('1252')\n//     clientMessage.setD('2345')\n//     const stream = client.pointBit(clientMessage);\n//     stream.on('data', (message: ServerMessage) => {\n//         console.log(`client received$ ${message}`)\n//     });\n// }\n//\n// PlayerService.prototype.send = function (params:ClientMessage) {\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA(params.getA());\n//     clientMessage.setB(params.getB());\n//     clientMessage.setC(params.getC());\n//     clientMessage.setD(params.getD());\n//     client.pointBit(\n//         clientMessage,\n//         undefined,\n//         (err: any, response: ServerMessage) => {\n//             if (err) {\n//                 console.error(err);\n//             } else {\n//                 console.log('response', response.toObject());\n//                 (document.getElementById('message') as HTMLFormElement)!.value = '';\n//             }\n//         })\n// }\n\nPlayerService.prototype.pointBit = function (ctx) {\n  if (true) return;\n\n  if (!client) {\n    client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n  }\n\n  console.log('PlayerService.prototype.pointBit ctx => ', ctx);\n  const [a, b, c, d] = ctx.array;\n  const clientMessage = new ClientMessage();\n  clientMessage.setA(a);\n  clientMessage.setB(b);\n  clientMessage.setC(c);\n  clientMessage.setD(d);\n\n  if (client) {\n    client.pointBit(clientMessage, undefined, (err, response) => {\n      if (err) {\n        console.error(err);\n      } else {\n        console.log('response', response.toObject());\n      }\n    });\n  }\n};\n\nexport default PlayerService;","map":{"version":3,"sources":["/Users/amit/Projects/sound-visualization/client/services/PlayerService.ts"],"names":["PlayerServiceClient","ClientMessage","client","PlayerService","prototype","pointBit","ctx","window","location","hostname","console","log","a","b","c","d","array","clientMessage","setA","setB","setC","setD","undefined","err","response","error","toObject"],"mappings":"AAAA;AACA,SAASA,mBAAT,QAAoC,6BAApC;AACA,SAASC,aAAT,QAA6C,oBAA7C;AAEA,IAAIC,MAAJ;AAEA,OAAO,SAASC,aAAT,GAAyB,CAG/B,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,aAAa,CAACC,SAAd,CAAwBC,QAAxB,GAAmC,UAAUC,GAAV,EAAe;AAC9C,YAAmC;;AACnC,MAAI,CAACJ,MAAL,EAAa;AACTA,IAAAA,MAAM,GAAG,IAAIF,mBAAJ,CAAwB,YAAYO,MAAM,CAACC,QAAP,CAAgBC,QAA5B,GAAuC,QAA/D,CAAT;AACH;;AAEDC,EAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ,EAAwDL,GAAxD;AACA,QAAM,CAACM,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,IAAeT,GAAG,CAACU,KAAzB;AACA,QAAMC,aAAa,GAAG,IAAIhB,aAAJ,EAAtB;AACAgB,EAAAA,aAAa,CAACC,IAAd,CAAmBN,CAAnB;AACAK,EAAAA,aAAa,CAACE,IAAd,CAAmBN,CAAnB;AACAI,EAAAA,aAAa,CAACG,IAAd,CAAmBN,CAAnB;AACAG,EAAAA,aAAa,CAACI,IAAd,CAAmBN,CAAnB;;AACA,MAAGb,MAAH,EAAW;AACPA,IAAAA,MAAM,CAACG,QAAP,CACIY,aADJ,EAEIK,SAFJ,EAGI,CAACC,GAAD,EAAWC,QAAX,KAAuC;AACnC,UAAID,GAAJ,EAAS;AACLb,QAAAA,OAAO,CAACe,KAAR,CAAcF,GAAd;AACH,OAFD,MAEO;AACHb,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBa,QAAQ,CAACE,QAAT,EAAxB;AAEH;AACJ,KAVL;AAWH;AAEJ,CA3BD;;AA8BA,eAAevB,aAAf","sourcesContent":["//import {RpcError as GrpcWebError} from 'grpc-web';\nimport { PlayerServiceClient } from '../proto/player_grpc_web_pb';\nimport { ClientMessage, ServerMessage } from '../proto/player_pb';\n\nlet client\n\nexport function PlayerService() {\n    \n\n}\n\n// PlayerService.prototype.join = function join(params:ClientMessage) {\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA('542')\n//     clientMessage.setB('234')\n//     clientMessage.setC('1252')\n//     clientMessage.setD('2345')\n//     const stream = client.pointBit(clientMessage);\n//     stream.on('data', (message: ServerMessage) => {\n//         console.log(`client received$ ${message}`)\n//     });\n// }\n//\n// PlayerService.prototype.send = function (params:ClientMessage) {\n//     if (!client) {\n//         client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n//     }\n//     const clientMessage = new ClientMessage();\n//     clientMessage.setA(params.getA());\n//     clientMessage.setB(params.getB());\n//     clientMessage.setC(params.getC());\n//     clientMessage.setD(params.getD());\n//     client.pointBit(\n//         clientMessage,\n//         undefined,\n//         (err: any, response: ServerMessage) => {\n//             if (err) {\n//                 console.error(err);\n//             } else {\n//                 console.log('response', response.toObject());\n//                 (document.getElementById('message') as HTMLFormElement)!.value = '';\n//             }\n//         })\n// }\n\nPlayerService.prototype.pointBit = function (ctx) {\n    if (typeof window === 'undefined') return;\n    if (!client) {\n        client = new PlayerServiceClient('http://' + window.location.hostname + ':50051');\n    }\n\n    console.log('PlayerService.prototype.pointBit ctx => ', ctx)\n    const [a, b, c, d] = ctx.array\n    const clientMessage = new ClientMessage();\n    clientMessage.setA(a);\n    clientMessage.setB(b);\n    clientMessage.setC(c);\n    clientMessage.setD(d);\n    if(client) {\n        client.pointBit(\n            clientMessage,\n            undefined,\n            (err: any, response: ServerMessage) => {\n                if (err) {\n                    console.error(err);\n                } else {\n                    console.log('response', response.toObject());\n\n                }\n            })\n    }\n\n}\n\n\nexport default PlayerService\n"]},"metadata":{},"sourceType":"module"}